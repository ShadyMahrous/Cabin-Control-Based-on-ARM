
STM32F401VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d38  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025c18  08001ecc  08001ecc  00011ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027ae4  08027ae4  00040008  2**0
                  CONTENTS
  4 .ARM          00000000  08027ae4  08027ae4  00040008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08027ae4  08027ae4  00040008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027ae4  08027ae4  00037ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027ae8  08027ae8  00037ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08027aec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000008  08027af4  00040008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08027af4  00040054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d37  00000000  00000000  00040038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c4e  00000000  00000000  00042d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  000439c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  00043d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000aeb  00000000  00000000  00044028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000039ae  00000000  00000000  00044b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006a32  00000000  00000000  000484c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004eef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c10  00000000  00000000  0004ef44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001eb4 	.word	0x08001eb4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08001eb4 	.word	0x08001eb4

080001d4 <Delay_vMilliSecond16MHzoscillator>:
 */

#include "DELAY_UNIT.h"

extern void Delay_vMilliSecond16MHzoscillator(U16 copy_U16mSTime)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	volatile U16 u16Local_Count1 =0;
 80001de:	2300      	movs	r3, #0
 80001e0:	81fb      	strh	r3, [r7, #14]
	volatile U16 u16Local_Count2 =0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	81bb      	strh	r3, [r7, #12]
	for(u16Local_Count1 = 0 ; u16Local_Count1 < copy_U16mSTime  ; u16Local_Count1++ )
 80001e6:	2300      	movs	r3, #0
 80001e8:	81fb      	strh	r3, [r7, #14]
 80001ea:	e012      	b.n	8000212 <Delay_vMilliSecond16MHzoscillator+0x3e>
	for(u16Local_Count2  = 0 ; u16Local_Count2  < 3180  ; u16Local_Count2 ++ )
 80001ec:	2300      	movs	r3, #0
 80001ee:	81bb      	strh	r3, [r7, #12]
 80001f0:	e004      	b.n	80001fc <Delay_vMilliSecond16MHzoscillator+0x28>
 80001f2:	89bb      	ldrh	r3, [r7, #12]
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	3301      	adds	r3, #1
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	81bb      	strh	r3, [r7, #12]
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	b29b      	uxth	r3, r3
 8000200:	f640 426b 	movw	r2, #3179	; 0xc6b
 8000204:	4293      	cmp	r3, r2
 8000206:	d9f4      	bls.n	80001f2 <Delay_vMilliSecond16MHzoscillator+0x1e>
	for(u16Local_Count1 = 0 ; u16Local_Count1 < copy_U16mSTime  ; u16Local_Count1++ )
 8000208:	89fb      	ldrh	r3, [r7, #14]
 800020a:	b29b      	uxth	r3, r3
 800020c:	3301      	adds	r3, #1
 800020e:	b29b      	uxth	r3, r3
 8000210:	81fb      	strh	r3, [r7, #14]
 8000212:	89fb      	ldrh	r3, [r7, #14]
 8000214:	b29b      	uxth	r3, r3
 8000216:	88fa      	ldrh	r2, [r7, #6]
 8000218:	429a      	cmp	r2, r3
 800021a:	d8e7      	bhi.n	80001ec <Delay_vMilliSecond16MHzoscillator+0x18>
	{/* Do nothing for 1 ms*/}
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <HKEYPAD_vInitiate>:
 */

#include "HAL_Keypad_Interface.h"

void HKEYPAD_vInitiate(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
	MRCC_vEnableBusClock(Bus_AHB1, KEYPAD_ROW_BUS);
 800022e:	2104      	movs	r1, #4
 8000230:	2000      	movs	r0, #0
 8000232:	f001 f85d 	bl	80012f0 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_AHB1, KEYPAD_COL_BUS);
 8000236:	2104      	movs	r1, #4
 8000238:	2000      	movs	r0, #0
 800023a:	f001 f859 	bl	80012f0 <MRCC_vEnableBusClock>
	/************************************************************************************/
	MGPIO_vSetPinMode(KEYPAD_ROW_PORT, KEYPAD_R0_PIN, OUTPUT_MODE);
 800023e:	2201      	movs	r2, #1
 8000240:	2100      	movs	r1, #0
 8000242:	2004      	movs	r0, #4
 8000244:	f000 fc30 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(KEYPAD_ROW_PORT, KEYPAD_R1_PIN, OUTPUT_MODE);
 8000248:	2201      	movs	r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	2004      	movs	r0, #4
 800024e:	f000 fc2b 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(KEYPAD_ROW_PORT, KEYPAD_R2_PIN, OUTPUT_MODE);
 8000252:	2201      	movs	r2, #1
 8000254:	2102      	movs	r1, #2
 8000256:	2004      	movs	r0, #4
 8000258:	f000 fc26 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(KEYPAD_ROW_PORT, KEYPAD_R3_PIN, OUTPUT_MODE);
 800025c:	2201      	movs	r2, #1
 800025e:	2103      	movs	r1, #3
 8000260:	2004      	movs	r0, #4
 8000262:	f000 fc21 	bl	8000aa8 <MGPIO_vSetPinMode>

	MGPIO_vSetPinOutputType(KEYPAD_ROW_PORT, KEYPAD_R0_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	2004      	movs	r0, #4
 800026c:	f000 fc94 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(KEYPAD_ROW_PORT, KEYPAD_R1_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000270:	2200      	movs	r2, #0
 8000272:	2101      	movs	r1, #1
 8000274:	2004      	movs	r0, #4
 8000276:	f000 fc8f 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(KEYPAD_ROW_PORT, KEYPAD_R2_PIN, OUTPUT_PUSH_PULL_TYPE);
 800027a:	2200      	movs	r2, #0
 800027c:	2102      	movs	r1, #2
 800027e:	2004      	movs	r0, #4
 8000280:	f000 fc8a 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(KEYPAD_ROW_PORT, KEYPAD_R3_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000284:	2200      	movs	r2, #0
 8000286:	2103      	movs	r1, #3
 8000288:	2004      	movs	r0, #4
 800028a:	f000 fc85 	bl	8000b98 <MGPIO_vSetPinOutputType>

	MGPIO_vSetPinOutputSpeed(KEYPAD_ROW_PORT, KEYPAD_R0_PIN, OUTPUT_LOW_SPEED);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2004      	movs	r0, #4
 8000294:	f000 fcf2 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(KEYPAD_ROW_PORT, KEYPAD_R1_PIN, OUTPUT_LOW_SPEED);
 8000298:	2200      	movs	r2, #0
 800029a:	2101      	movs	r1, #1
 800029c:	2004      	movs	r0, #4
 800029e:	f000 fced 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(KEYPAD_ROW_PORT, KEYPAD_R2_PIN, OUTPUT_LOW_SPEED);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2102      	movs	r1, #2
 80002a6:	2004      	movs	r0, #4
 80002a8:	f000 fce8 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(KEYPAD_ROW_PORT, KEYPAD_R3_PIN, OUTPUT_LOW_SPEED);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2103      	movs	r1, #3
 80002b0:	2004      	movs	r0, #4
 80002b2:	f000 fce3 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>

	MGPIO_vWritePinData(KEYPAD_ROW_PORT, KEYPAD_R0_PIN, HIGH_STATE);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2100      	movs	r1, #0
 80002ba:	2004      	movs	r0, #4
 80002bc:	f000 fe3a 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(KEYPAD_ROW_PORT, KEYPAD_R1_PIN, HIGH_STATE);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	2004      	movs	r0, #4
 80002c6:	f000 fe35 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(KEYPAD_ROW_PORT, KEYPAD_R2_PIN, HIGH_STATE);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2102      	movs	r1, #2
 80002ce:	2004      	movs	r0, #4
 80002d0:	f000 fe30 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(KEYPAD_ROW_PORT, KEYPAD_R3_PIN, HIGH_STATE);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	2004      	movs	r0, #4
 80002da:	f000 fe2b 	bl	8000f34 <MGPIO_vWritePinData>
	/************************************************************************************/
	MGPIO_vSetPinMode(KEYPAD_COL_PORT, KEYPAD_C0_PIN, INPUT_MODE);
 80002de:	2200      	movs	r2, #0
 80002e0:	2104      	movs	r1, #4
 80002e2:	2004      	movs	r0, #4
 80002e4:	f000 fbe0 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(KEYPAD_COL_PORT, KEYPAD_C1_PIN, INPUT_MODE);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2105      	movs	r1, #5
 80002ec:	2004      	movs	r0, #4
 80002ee:	f000 fbdb 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(KEYPAD_COL_PORT, KEYPAD_C2_PIN, INPUT_MODE);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2106      	movs	r1, #6
 80002f6:	2004      	movs	r0, #4
 80002f8:	f000 fbd6 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(KEYPAD_COL_PORT, KEYPAD_C3_PIN, INPUT_MODE);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2107      	movs	r1, #7
 8000300:	2004      	movs	r0, #4
 8000302:	f000 fbd1 	bl	8000aa8 <MGPIO_vSetPinMode>

	MGPIO_vSetPinPullType(KEYPAD_COL_PORT, KEYPAD_C0_PIN, PULL_UP_STATE);
 8000306:	2201      	movs	r2, #1
 8000308:	2104      	movs	r1, #4
 800030a:	2004      	movs	r0, #4
 800030c:	f000 fd2e 	bl	8000d6c <MGPIO_vSetPinPullType>
	MGPIO_vSetPinPullType(KEYPAD_COL_PORT, KEYPAD_C1_PIN, PULL_UP_STATE);
 8000310:	2201      	movs	r2, #1
 8000312:	2105      	movs	r1, #5
 8000314:	2004      	movs	r0, #4
 8000316:	f000 fd29 	bl	8000d6c <MGPIO_vSetPinPullType>
	MGPIO_vSetPinPullType(KEYPAD_COL_PORT, KEYPAD_C2_PIN, PULL_UP_STATE);
 800031a:	2201      	movs	r2, #1
 800031c:	2106      	movs	r1, #6
 800031e:	2004      	movs	r0, #4
 8000320:	f000 fd24 	bl	8000d6c <MGPIO_vSetPinPullType>
	MGPIO_vSetPinPullType(KEYPAD_COL_PORT, KEYPAD_C3_PIN, PULL_UP_STATE);
 8000324:	2201      	movs	r2, #1
 8000326:	2107      	movs	r1, #7
 8000328:	2004      	movs	r0, #4
 800032a:	f000 fd1f 	bl	8000d6c <MGPIO_vSetPinPullType>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <HKEYPAD_U8READ>:

U8 HKEYPAD_U8READ(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
	U8 KeyPad_ARRAY [4][4]= KEYPAD_KEYS_VALUES;
 800033a:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <HKEYPAD_U8READ+0xbc>)
 800033c:	1d3c      	adds	r4, r7, #4
 800033e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	U8 loc_U8_Row =KEYPAD_R1_PIN;
 8000344:	2301      	movs	r3, #1
 8000346:	75fb      	strb	r3, [r7, #23]
	U8 loc_U8_Col =KEYPAD_C1_PIN;
 8000348:	2305      	movs	r3, #5
 800034a:	75bb      	strb	r3, [r7, #22]
	U8 loc_U8_RWCL_DATA_READING = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	757b      	strb	r3, [r7, #21]
	U8 loc_U8_Pad_Reading = PAD_RELEASE;
 8000350:	2301      	movs	r3, #1
 8000352:	753b      	strb	r3, [r7, #20]

	for (loc_U8_Row = KEYPAD_R0_PIN; loc_U8_Row <= KEYPAD_R3_PIN; loc_U8_Row++)
 8000354:	2300      	movs	r3, #0
 8000356:	75fb      	strb	r3, [r7, #23]
 8000358:	e041      	b.n	80003de <HKEYPAD_U8READ+0xaa>
	{
		MGPIO_vWritePinData(KEYPAD_ROW_PORT, loc_U8_Row, LOW_STATE);
 800035a:	7dfb      	ldrb	r3, [r7, #23]
 800035c:	2200      	movs	r2, #0
 800035e:	4619      	mov	r1, r3
 8000360:	2004      	movs	r0, #4
 8000362:	f000 fde7 	bl	8000f34 <MGPIO_vWritePinData>
		for (loc_U8_Col = KEYPAD_C0_PIN; loc_U8_Col <= KEYPAD_C3_PIN; loc_U8_Col++)
 8000366:	2304      	movs	r3, #4
 8000368:	75bb      	strb	r3, [r7, #22]
 800036a:	e02c      	b.n	80003c6 <HKEYPAD_U8READ+0x92>
		{
			loc_U8_Pad_Reading = MGPIO_U8ReadPinData(KEYPAD_COL_PORT, loc_U8_Col);
 800036c:	7dbb      	ldrb	r3, [r7, #22]
 800036e:	4619      	mov	r1, r3
 8000370:	2004      	movs	r0, #4
 8000372:	f000 fd73 	bl	8000e5c <MGPIO_U8ReadPinData>
 8000376:	4603      	mov	r3, r0
 8000378:	753b      	strb	r3, [r7, #20]
			if (PAD_PRESSE == loc_U8_Pad_Reading)
 800037a:	7d3b      	ldrb	r3, [r7, #20]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d11f      	bne.n	80003c0 <HKEYPAD_U8READ+0x8c>
			{
				Delay_vMilliSecond16MHzoscillator(50);
 8000380:	2032      	movs	r0, #50	; 0x32
 8000382:	f7ff ff27 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
				loc_U8_Pad_Reading = MGPIO_U8ReadPinData(KEYPAD_COL_PORT, loc_U8_Col);
 8000386:	7dbb      	ldrb	r3, [r7, #22]
 8000388:	4619      	mov	r1, r3
 800038a:	2004      	movs	r0, #4
 800038c:	f000 fd66 	bl	8000e5c <MGPIO_U8ReadPinData>
 8000390:	4603      	mov	r3, r0
 8000392:	753b      	strb	r3, [r7, #20]
				if (PAD_PRESSE == loc_U8_Pad_Reading)
 8000394:	7d3b      	ldrb	r3, [r7, #20]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d112      	bne.n	80003c0 <HKEYPAD_U8READ+0x8c>
				{
					while (PAD_PRESSE == MGPIO_U8ReadPinData(KEYPAD_COL_PORT, loc_U8_Col));
 800039a:	bf00      	nop
 800039c:	7dbb      	ldrb	r3, [r7, #22]
 800039e:	4619      	mov	r1, r3
 80003a0:	2004      	movs	r0, #4
 80003a2:	f000 fd5b 	bl	8000e5c <MGPIO_U8ReadPinData>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f7      	beq.n	800039c <HKEYPAD_U8READ+0x68>
					loc_U8_RWCL_DATA_READING =  KeyPad_ARRAY[loc_U8_Row -KEYPAD_R0_PIN][loc_U8_Col -KEYPAD_C0_PIN];
 80003ac:	7dfa      	ldrb	r2, [r7, #23]
 80003ae:	7dbb      	ldrb	r3, [r7, #22]
 80003b0:	3b04      	subs	r3, #4
 80003b2:	0092      	lsls	r2, r2, #2
 80003b4:	3218      	adds	r2, #24
 80003b6:	443a      	add	r2, r7
 80003b8:	4413      	add	r3, r2
 80003ba:	3b14      	subs	r3, #20
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	757b      	strb	r3, [r7, #21]
		for (loc_U8_Col = KEYPAD_C0_PIN; loc_U8_Col <= KEYPAD_C3_PIN; loc_U8_Col++)
 80003c0:	7dbb      	ldrb	r3, [r7, #22]
 80003c2:	3301      	adds	r3, #1
 80003c4:	75bb      	strb	r3, [r7, #22]
 80003c6:	7dbb      	ldrb	r3, [r7, #22]
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	d9cf      	bls.n	800036c <HKEYPAD_U8READ+0x38>
				}
				else {/*NOTHING*/}
			}
			else {/*NOTHING*/}
		}
		MGPIO_vWritePinData(KEYPAD_ROW_PORT, loc_U8_Row, HIGH_STATE);
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	2004      	movs	r0, #4
 80003d4:	f000 fdae 	bl	8000f34 <MGPIO_vWritePinData>
	for (loc_U8_Row = KEYPAD_R0_PIN; loc_U8_Row <= KEYPAD_R3_PIN; loc_U8_Row++)
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
 80003da:	3301      	adds	r3, #1
 80003dc:	75fb      	strb	r3, [r7, #23]
 80003de:	7dfb      	ldrb	r3, [r7, #23]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d9ba      	bls.n	800035a <HKEYPAD_U8READ+0x26>
		//Delay_vMilliSecond16MHzoscillator(100);
		//MGPIO_vWritePinData(PHB1_GPIOA, GPIO_PIN_2, LOW_STATE);
	}
	return loc_U8_RWCL_DATA_READING;
 80003e4:	7d7b      	ldrb	r3, [r7, #21]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	371c      	adds	r7, #28
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd90      	pop	{r4, r7, pc}
 80003ee:	bf00      	nop
 80003f0:	08001ecc 	.word	0x08001ecc

080003f4 <HLCD_vInitiate>:
U8 Char6[8] = { 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04 };
U8 Char7[8] = { 0x00, 0x00, 0x0A, 0x00, 0x04, 0x11, 0x0E, 0x00 };
U8 Char8[8] = { 0x00, 0x0A, 0x1F, 0x1F, 0x0E, 0x04, 0x00, 0x00 };

void HLCD_vInitiate(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	MRCC_vEnableBusClock(Bus_AHB1, LCD_BUS);
 80003f8:	2103      	movs	r1, #3
 80003fa:	2000      	movs	r0, #0
 80003fc:	f000 ff78 	bl	80012f0 <MRCC_vEnableBusClock>
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	MGPIO_vSetPinMode(LCD_RS_PIN, OUTPUT_MODE);
 8000400:	2201      	movs	r2, #1
 8000402:	210a      	movs	r1, #10
 8000404:	2003      	movs	r0, #3
 8000406:	f000 fb4f 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_RW_PIN, OUTPUT_MODE);
 800040a:	2201      	movs	r2, #1
 800040c:	2109      	movs	r1, #9
 800040e:	2003      	movs	r0, #3
 8000410:	f000 fb4a 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_EN_PIN, OUTPUT_MODE);
 8000414:	2201      	movs	r2, #1
 8000416:	2108      	movs	r1, #8
 8000418:	2003      	movs	r0, #3
 800041a:	f000 fb45 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(LCD_RS_PIN, OUTPUT_LOW_SPEED);
 800041e:	2200      	movs	r2, #0
 8000420:	210a      	movs	r1, #10
 8000422:	2003      	movs	r0, #3
 8000424:	f000 fc2a 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_RW_PIN, OUTPUT_LOW_SPEED);
 8000428:	2200      	movs	r2, #0
 800042a:	2109      	movs	r1, #9
 800042c:	2003      	movs	r0, #3
 800042e:	f000 fc25 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_EN_PIN, OUTPUT_LOW_SPEED);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	2003      	movs	r0, #3
 8000438:	f000 fc20 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(LCD_RS_PIN, OUTPUT_PUSH_PULL_TYPE);
 800043c:	2200      	movs	r2, #0
 800043e:	210a      	movs	r1, #10
 8000440:	2003      	movs	r0, #3
 8000442:	f000 fba9 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_RW_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000446:	2200      	movs	r2, #0
 8000448:	2109      	movs	r1, #9
 800044a:	2003      	movs	r0, #3
 800044c:	f000 fba4 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_EN_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000450:	2200      	movs	r2, #0
 8000452:	2108      	movs	r1, #8
 8000454:	2003      	movs	r0, #3
 8000456:	f000 fb9f 	bl	8000b98 <MGPIO_vSetPinOutputType>
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	#if LCD_MODE     ==   _8_BIT_MODE
	MGPIO_vSetPinMode(LCD_DATA_0_PIN, OUTPUT_MODE);
 800045a:	2201      	movs	r2, #1
 800045c:	2100      	movs	r1, #0
 800045e:	2003      	movs	r0, #3
 8000460:	f000 fb22 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_DATA_1_PIN, OUTPUT_MODE);
 8000464:	2201      	movs	r2, #1
 8000466:	2101      	movs	r1, #1
 8000468:	2003      	movs	r0, #3
 800046a:	f000 fb1d 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_DATA_2_PIN, OUTPUT_MODE);
 800046e:	2201      	movs	r2, #1
 8000470:	2102      	movs	r1, #2
 8000472:	2003      	movs	r0, #3
 8000474:	f000 fb18 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_DATA_3_PIN, OUTPUT_MODE);
 8000478:	2201      	movs	r2, #1
 800047a:	2103      	movs	r1, #3
 800047c:	2003      	movs	r0, #3
 800047e:	f000 fb13 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_0_PIN, OUTPUT_LOW_SPEED);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	2003      	movs	r0, #3
 8000488:	f000 fbf8 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_1_PIN, OUTPUT_LOW_SPEED);
 800048c:	2200      	movs	r2, #0
 800048e:	2101      	movs	r1, #1
 8000490:	2003      	movs	r0, #3
 8000492:	f000 fbf3 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_2_PIN, OUTPUT_LOW_SPEED);
 8000496:	2200      	movs	r2, #0
 8000498:	2102      	movs	r1, #2
 800049a:	2003      	movs	r0, #3
 800049c:	f000 fbee 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_3_PIN, OUTPUT_LOW_SPEED);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2103      	movs	r1, #3
 80004a4:	2003      	movs	r0, #3
 80004a6:	f000 fbe9 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(LCD_DATA_0_PIN, OUTPUT_PUSH_PULL_TYPE);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	2003      	movs	r0, #3
 80004b0:	f000 fb72 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_DATA_1_PIN, OUTPUT_PUSH_PULL_TYPE);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2101      	movs	r1, #1
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 fb6d 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_DATA_2_PIN, OUTPUT_PUSH_PULL_TYPE);
 80004be:	2200      	movs	r2, #0
 80004c0:	2102      	movs	r1, #2
 80004c2:	2003      	movs	r0, #3
 80004c4:	f000 fb68 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_DATA_3_PIN, OUTPUT_PUSH_PULL_TYPE);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2103      	movs	r1, #3
 80004cc:	2003      	movs	r0, #3
 80004ce:	f000 fb63 	bl	8000b98 <MGPIO_vSetPinOutputType>

	#elif LCD_MODE    ==   _4_BIT_MODE
				/**NOTHING**/
	#endif
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	MGPIO_vSetPinMode(LCD_DATA_4_PIN, OUTPUT_MODE);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2104      	movs	r1, #4
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 fae6 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_DATA_5_PIN, OUTPUT_MODE);
 80004dc:	2201      	movs	r2, #1
 80004de:	2105      	movs	r1, #5
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 fae1 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_DATA_6_PIN, OUTPUT_MODE);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2106      	movs	r1, #6
 80004ea:	2003      	movs	r0, #3
 80004ec:	f000 fadc 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(LCD_DATA_7_PIN, OUTPUT_MODE);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2107      	movs	r1, #7
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 fad7 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_4_PIN, OUTPUT_LOW_SPEED);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2104      	movs	r1, #4
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 fbbc 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_5_PIN, OUTPUT_LOW_SPEED);
 8000504:	2200      	movs	r2, #0
 8000506:	2105      	movs	r1, #5
 8000508:	2003      	movs	r0, #3
 800050a:	f000 fbb7 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_6_PIN, OUTPUT_LOW_SPEED);
 800050e:	2200      	movs	r2, #0
 8000510:	2106      	movs	r1, #6
 8000512:	2003      	movs	r0, #3
 8000514:	f000 fbb2 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(LCD_DATA_7_PIN, OUTPUT_LOW_SPEED);
 8000518:	2200      	movs	r2, #0
 800051a:	2107      	movs	r1, #7
 800051c:	2003      	movs	r0, #3
 800051e:	f000 fbad 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(LCD_DATA_4_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000522:	2200      	movs	r2, #0
 8000524:	2104      	movs	r1, #4
 8000526:	2003      	movs	r0, #3
 8000528:	f000 fb36 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_DATA_5_PIN, OUTPUT_PUSH_PULL_TYPE);
 800052c:	2200      	movs	r2, #0
 800052e:	2105      	movs	r1, #5
 8000530:	2003      	movs	r0, #3
 8000532:	f000 fb31 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_DATA_6_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000536:	2200      	movs	r2, #0
 8000538:	2106      	movs	r1, #6
 800053a:	2003      	movs	r0, #3
 800053c:	f000 fb2c 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(LCD_DATA_7_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000540:	2200      	movs	r2, #0
 8000542:	2107      	movs	r1, #7
 8000544:	2003      	movs	r0, #3
 8000546:	f000 fb27 	bl	8000b98 <MGPIO_vSetPinOutputType>

/*==============================================================================*/
	Delay_vMilliSecond16MHzoscillator(50); //Wait for H/W init...
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f7ff fe42 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	#if LCD_MODE     ==   _8_BIT_MODE
	HLCD_vWriteCommand(LCD_COMMAND_ACTIVATE_8_BITMODE);
 8000550:	2038      	movs	r0, #56	; 0x38
 8000552:	f000 f81d 	bl	8000590 <HLCD_vWriteCommand>
	Delay_vMilliSecond16MHzoscillator(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f7ff fe3c 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	HLCD_vWriteCommand(LCD_COMMAND_2_ACTIVATE_4_BITMODE);
	Delay_vMilliSecond16MHzoscillator(5);
	HLCD_vWriteCommand(LCD_COMMAND_3_ACTIVATE_4_BITMODE);
	Delay_vMilliSecond16MHzoscillator(5);
	#endif
	HLCD_vWriteCommand(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF);
 800055c:	200c      	movs	r0, #12
 800055e:	f000 f817 	bl	8000590 <HLCD_vWriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff fe36 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	HLCD_vWriteCommand(LCD_COMMAND_CLEAR_SCREEN);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 f811 	bl	8000590 <HLCD_vWriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f7ff fe30 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	HLCD_vWriteCommand(LCD_COMMAND_RETURN_HOME_CLEAR_SCREEN);
 8000574:	2002      	movs	r0, #2
 8000576:	f000 f80b 	bl	8000590 <HLCD_vWriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff fe2a 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	HLCD_vWriteCommand(LCD_COMMAND_CURSOR_INCREMENT);
 8000580:	2006      	movs	r0, #6
 8000582:	f000 f805 	bl	8000590 <HLCD_vWriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f7ff fe24 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <HLCD_vWriteCommand>:

void HLCD_vWriteCommand(U8 loc_U8_LCD_COMMAND)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	MGPIO_vWritePinData(LCD_RS_PIN, LOW_STATE); // Fetal operation if High while "Command Transfer"
 800059a:	2200      	movs	r2, #0
 800059c:	210a      	movs	r1, #10
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 fcc8 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_RW_PIN, LOW_STATE); // Held Low for "Write Operation"
 80005a4:	2200      	movs	r2, #0
 80005a6:	2109      	movs	r1, #9
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fcc3 	bl	8000f34 <MGPIO_vWritePinData>
	/**********************	_8_BIT_MODE	*************************/
	#if LCD_MODE    ==   _8_BIT_MODE
	MGPIO_vWritePinData(LCD_DATA_0_PIN, GET_BIT(loc_U8_LCD_COMMAND, 0));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 fcba 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_1_PIN, GET_BIT(loc_U8_LCD_COMMAND, 1));
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	2101      	movs	r1, #1
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 fcaf 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_2_PIN, GET_BIT(loc_U8_LCD_COMMAND, 2));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	2102      	movs	r1, #2
 80005e6:	2003      	movs	r0, #3
 80005e8:	f000 fca4 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_3_PIN, GET_BIT(loc_U8_LCD_COMMAND, 3));
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	2103      	movs	r1, #3
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 fc99 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_4_PIN, GET_BIT(loc_U8_LCD_COMMAND, 4));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	2104      	movs	r1, #4
 8000612:	2003      	movs	r0, #3
 8000614:	f000 fc8e 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_5_PIN, GET_BIT(loc_U8_LCD_COMMAND, 5));
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	2105      	movs	r1, #5
 8000628:	2003      	movs	r0, #3
 800062a:	f000 fc83 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_6_PIN, GET_BIT(loc_U8_LCD_COMMAND, 6));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	099b      	lsrs	r3, r3, #6
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2106      	movs	r1, #6
 800063e:	2003      	movs	r0, #3
 8000640:	f000 fc78 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_7_PIN, GET_BIT(loc_U8_LCD_COMMAND, 7));
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	09db      	lsrs	r3, r3, #7
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	2107      	movs	r1, #7
 800064e:	2003      	movs	r0, #3
 8000650:	f000 fc70 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_EN_PIN, HIGH_STATE);
 8000654:	2201      	movs	r2, #1
 8000656:	2108      	movs	r1, #8
 8000658:	2003      	movs	r0, #3
 800065a:	f000 fc6b 	bl	8000f34 <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(5);
 800065e:	2005      	movs	r0, #5
 8000660:	f7ff fdb8 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(LCD_EN_PIN, LOW_STATE);
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	2003      	movs	r0, #3
 800066a:	f000 fc63 	bl	8000f34 <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff fdb0 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(LCD_EN_PIN, HIGH_STATE);
	Delay_vMilliSecond16MHzoscillator(5);
	MGPIO_vWritePinData(LCD_EN_PIN, LOW_STATE);
	Delay_vMilliSecond16MHzoscillator(2);
	#endif
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <HLCD_vClearScreen>:

void HLCD_vClearScreen(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HLCD_vWriteCommand(LCD_COMMAND_CLEAR_SCREEN); //Refer to the command sheet "HAL_LCD_COMMANDS"
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ff85 	bl	8000590 <HLCD_vWriteCommand>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <HLCD_vGoTo>:

void HLCD_vGoTo(U8 loc_U8_Row, U8 loc_U8_Col)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	#if   LCD_DIMENSIONS   ==   LCD_2_BY_16
	U8 loc_Arr_RC_Commands[2] = {LCD_COMMAND_GOTO_1stLINE_POS_0,
							     LCD_COMMAND_GOTO_2ndLINE_POS_0 };
	#elif LCD_DIMENSIONS   ==   LCD_4_BY_16
	U8 loc_Arr_RC_Commands[4] = {LCD_COMMAND_GOTO_1stLINE_POS_0,
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HLCD_vGoTo+0x34>)
 800069e:	60fb      	str	r3, [r7, #12]
								 LCD_COMMAND_GOTO_2ndLINE_POS_0,
								 LCD_COMMAND_GOTO_3ndLINE_POS_0,
							     LCD_COMMAND_GOTO_4ndLINE_POS_0 };
	#endif
	//Refer to the command sheet "HAL_LCD_COMMANDS"
	HLCD_vWriteCommand(loc_Arr_RC_Commands[loc_U8_Row]+loc_U8_Col);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	3310      	adds	r3, #16
 80006a4:	443b      	add	r3, r7
 80006a6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff6d 	bl	8000590 <HLCD_vWriteCommand>
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	d090c080 	.word	0xd090c080

080006c4 <HLCD_vWriteCharacter>:
}


/************************************************************************************************/
void HLCD_vWriteCharacter(U8 loc_U8_CHARACTER)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	MGPIO_vWritePinData(LCD_RS_PIN, HIGH_STATE); // Fetal operation if Low while "Data Transfer"
 80006ce:	2201      	movs	r2, #1
 80006d0:	210a      	movs	r1, #10
 80006d2:	2003      	movs	r0, #3
 80006d4:	f000 fc2e 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_RW_PIN, LOW_STATE);  // Held Low for "Write Operation"
 80006d8:	2200      	movs	r2, #0
 80006da:	2109      	movs	r1, #9
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 fc29 	bl	8000f34 <MGPIO_vWritePinData>
	/**********************	_8_BIT_MODE	*************************/
	#if LCD_MODE    ==   _8_BIT_MODE
	MGPIO_vWritePinData(LCD_DATA_0_PIN, GET_BIT(loc_U8_CHARACTER, 0));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	2003      	movs	r0, #3
 80006f0:	f000 fc20 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_1_PIN, GET_BIT(loc_U8_CHARACTER, 1));
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	2101      	movs	r1, #1
 8000704:	2003      	movs	r0, #3
 8000706:	f000 fc15 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_2_PIN, GET_BIT(loc_U8_CHARACTER, 2));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	2102      	movs	r1, #2
 800071a:	2003      	movs	r0, #3
 800071c:	f000 fc0a 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_3_PIN, GET_BIT(loc_U8_CHARACTER, 3));
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	2103      	movs	r1, #3
 8000730:	2003      	movs	r0, #3
 8000732:	f000 fbff 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_4_PIN, GET_BIT(loc_U8_CHARACTER, 4));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	2104      	movs	r1, #4
 8000746:	2003      	movs	r0, #3
 8000748:	f000 fbf4 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_5_PIN, GET_BIT(loc_U8_CHARACTER, 5));
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2105      	movs	r1, #5
 800075c:	2003      	movs	r0, #3
 800075e:	f000 fbe9 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_6_PIN, GET_BIT(loc_U8_CHARACTER, 6));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	099b      	lsrs	r3, r3, #6
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	2106      	movs	r1, #6
 8000772:	2003      	movs	r0, #3
 8000774:	f000 fbde 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_DATA_7_PIN, GET_BIT(loc_U8_CHARACTER, 7));
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	09db      	lsrs	r3, r3, #7
 800077c:	b2db      	uxtb	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	2107      	movs	r1, #7
 8000782:	2003      	movs	r0, #3
 8000784:	f000 fbd6 	bl	8000f34 <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_EN_PIN, HIGH_STATE);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	2003      	movs	r0, #3
 800078e:	f000 fbd1 	bl	8000f34 <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(5);
 8000792:	2005      	movs	r0, #5
 8000794:	f7ff fd1e 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(LCD_EN_PIN, LOW_STATE);
 8000798:	2200      	movs	r2, #0
 800079a:	2108      	movs	r1, #8
 800079c:	2003      	movs	r0, #3
 800079e:	f000 fbc9 	bl	8000f34 <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff fd16 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(LCD_EN_PIN, HIGH_STATE);
	Delay_vMilliSecond16MHzoscillator(5);
	MGPIO_vWritePinData(LCD_EN_PIN, LOW_STATE);
	Delay_vMilliSecond16MHzoscillator(2);
	#endif
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HLCD_vWriteString>:

void HLCD_vWriteString(U8 *loc_U8_PTR_STRING)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	U8 loc_U8_Counter =0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
	while(loc_U8_PTR_STRING[loc_U8_Counter] != '\0')
 80007bc:	e009      	b.n	80007d2 <HLCD_vWriteString+0x22>
	{
		HLCD_vWriteCharacter(loc_U8_PTR_STRING[loc_U8_Counter]);
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff7c 	bl	80006c4 <HLCD_vWriteCharacter>
		loc_U8_Counter++;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	3301      	adds	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
	while(loc_U8_PTR_STRING[loc_U8_Counter] != '\0')
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1ef      	bne.n	80007be <HLCD_vWriteString+0xe>
	}
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HTFT_vWrite_Command>:
 */

#include "HAL_TFT_Interface.h"

void HTFT_vWrite_Command(U8 Copy_u8Command)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	/*Set Pin A0  to Low*/
	MGPIO_vWritePinData(TFT_A0_PORT, TFT_A0_PIN, LOW_STATE);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fb9c 	bl	8000f34 <MGPIO_vWritePinData>
	/* Send Command over SPI*/
	MSPI1_u16TrasRes(Copy_u8Command);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe53 	bl	80014ac <MSPI1_u16TrasRes>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HTFT_vWrite_Data>:

 void HTFT_vWrite_Data(U16 Copy_u8Data)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	80fb      	strh	r3, [r7, #6]
	/*Set Pin A0  to High*/
	MGPIO_vWritePinData(TFT_A0_PORT, TFT_A0_PIN, HIGH_STATE);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fb89 	bl	8000f34 <MGPIO_vWritePinData>
	/* Send Data over SPI*/
	MSPI1_u16TrasRes(Copy_u8Data);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fe41 	bl	80014ac <MSPI1_u16TrasRes>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HTFT_vInit>:

void HTFT_vInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	/* PIN Initialization */
	MGPIO_vSetPinMode(TFT_A0_PORT, TFT_A0_PIN, OUTPUT_MODE);  					/*A0*/
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	2000      	movs	r0, #0
 800083e:	f000 f933 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(TFT_A0_PORT, TFT_A0_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000842:	2200      	movs	r2, #0
 8000844:	2101      	movs	r1, #1
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f9a6 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_A0_PORT, TFT_A0_PIN, OUTPUT_LOW_SPEED);
 800084c:	2200      	movs	r2, #0
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fa13 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>

	MGPIO_vSetPinMode(TFT_RST_PORT, TFT_RST_PIN, OUTPUT_MODE);			/*RESET*/
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f924 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(TFT_RST_PORT, TFT_RST_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000860:	2200      	movs	r2, #0
 8000862:	2102      	movs	r1, #2
 8000864:	2000      	movs	r0, #0
 8000866:	f000 f997 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_RST_PORT, TFT_RST_PIN, OUTPUT_LOW_SPEED);
 800086a:	2200      	movs	r2, #0
 800086c:	2102      	movs	r1, #2
 800086e:	2000      	movs	r0, #0
 8000870:	f000 fa04 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>

	MGPIO_vSetPinMode(TFT_CLK_PORT, TFT_CLK_PIN, ALTERNATE_FUNCTION_MODE);			/*CLK*/
 8000874:	2202      	movs	r2, #2
 8000876:	2105      	movs	r1, #5
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f915 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinAltFun(TFT_CLK_PORT, TFT_CLK_PIN, ALTFUN_5);
 800087e:	2205      	movs	r2, #5
 8000880:	2105      	movs	r1, #5
 8000882:	2000      	movs	r0, #0
 8000884:	f000 fc2a 	bl	80010dc <MGPIO_vSetPinAltFun>
	MGPIO_vSetPinOutputType(TFT_CLK_PORT, TFT_CLK_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	2000      	movs	r0, #0
 800088e:	f000 f983 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_CLK_PORT, TFT_CLK_PIN, OUTPUT_MEDUIM_SPEED);
 8000892:	2201      	movs	r2, #1
 8000894:	2105      	movs	r1, #5
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f9f0 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>

	MGPIO_vSetPinMode(TFT_MOSI_PORT, TFT_MOSI_PIN, ALTERNATE_FUNCTION_MODE);				/*MOSI*/
 800089c:	2202      	movs	r2, #2
 800089e:	2107      	movs	r1, #7
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 f901 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinAltFun(TFT_MOSI_PORT, TFT_MOSI_PIN, ALTFUN_5);
 80008a6:	2205      	movs	r2, #5
 80008a8:	2107      	movs	r1, #7
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fc16 	bl	80010dc <MGPIO_vSetPinAltFun>
	MGPIO_vSetPinOutputType(TFT_MOSI_PORT, TFT_MOSI_PIN, OUTPUT_PUSH_PULL_TYPE);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2107      	movs	r1, #7
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f96f 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_MOSI_PORT, TFT_MOSI_PIN, OUTPUT_MEDUIM_SPEED);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2107      	movs	r1, #7
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f9dc 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>

	/*Reset Pulse*/
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, HIGH_STATE);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2102      	movs	r1, #2
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fb33 	bl	8000f34 <MGPIO_vWritePinData>
	MSTK_DelayMs(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fe44 	bl	800155c <MSTK_DelayMs>
	//_delay_us(100);
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, LOW_STATE);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2102      	movs	r1, #2
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 fb2b 	bl	8000f34 <MGPIO_vWritePinData>
	//_delay_us(1);
	MSTK_DelayMs(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 fe3c 	bl	800155c <MSTK_DelayMs>
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, HIGH_STATE);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2102      	movs	r1, #2
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fb23 	bl	8000f34 <MGPIO_vWritePinData>
	//_delay_us(100);
	MSTK_DelayMs(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f000 fe34 	bl	800155c <MSTK_DelayMs>
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, LOW_STATE);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2102      	movs	r1, #2
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fb1b 	bl	8000f34 <MGPIO_vWritePinData>
	/* Wait 100 us */
	//_delay_us(100);
	MSTK_DelayMs(100);
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f000 fe2c 	bl	800155c <MSTK_DelayMs>
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, HIGH_STATE);
 8000904:	2201      	movs	r2, #1
 8000906:	2102      	movs	r1, #2
 8000908:	2000      	movs	r0, #0
 800090a:	f000 fb13 	bl	8000f34 <MGPIO_vWritePinData>
	/* Wait 120 ms */
	//_delay_ms(120);
	MSTK_DelayMs(120000);
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <HTFT_vInit+0x104>)
 8000910:	f000 fe24 	bl	800155c <MSTK_DelayMs>
	/* Sleep Out Command */
	HTFT_vWrite_Command(SLPOUT);
 8000914:	2011      	movs	r0, #17
 8000916:	f7ff ff67 	bl	80007e8 <HTFT_vWrite_Command>
	/* Wait 150 ms */
	//_delay_ms(150);
	MSTK_DelayMs(150000);
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <HTFT_vInit+0x108>)
 800091c:	f000 fe1e 	bl	800155c <MSTK_DelayMs>
	/* Enable Color Mode  */
	HTFT_vWrite_Command(COLMOD);
 8000920:	203a      	movs	r0, #58	; 0x3a
 8000922:	f7ff ff61 	bl	80007e8 <HTFT_vWrite_Command>
	/* Enable RGB565 Command Parameter*/
	HTFT_vWrite_Data(RGB565);
 8000926:	2005      	movs	r0, #5
 8000928:	f7ff ff71 	bl	800080e <HTFT_vWrite_Data>
	/* Enable Display*/
	HTFT_vWrite_Command(DISON);
 800092c:	2029      	movs	r0, #41	; 0x29
 800092e:	f7ff ff5b 	bl	80007e8 <HTFT_vWrite_Command>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0001d4c0 	.word	0x0001d4c0
 800093c:	000249f0 	.word	0x000249f0

08000940 <HTFT_vSetCursorPosition>:

void HTFT_vSetCursorPosition(U16 X_Start, U16 Y_Start, U16 X_End, U16 Y_End)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4604      	mov	r4, r0
 8000948:	4608      	mov	r0, r1
 800094a:	4611      	mov	r1, r2
 800094c:	461a      	mov	r2, r3
 800094e:	4623      	mov	r3, r4
 8000950:	80fb      	strh	r3, [r7, #6]
 8000952:	4603      	mov	r3, r0
 8000954:	80bb      	strh	r3, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	807b      	strh	r3, [r7, #2]
 800095a:	4613      	mov	r3, r2
 800095c:	803b      	strh	r3, [r7, #0]
	/*	Set X_ADRESS  */
	HTFT_vWrite_Command(SET_X_ADDRESS);
 800095e:	202a      	movs	r0, #42	; 0x2a
 8000960:	f7ff ff42 	bl	80007e8 <HTFT_vWrite_Command>
	/* X Start Position*/
	HTFT_vWrite_Data(X_Start >>8);      		/*send higher byte*/
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff4f 	bl	800080e <HTFT_vWrite_Data>
	HTFT_vWrite_Data(X_Start & 0x00ff);		/*send lower Byte */
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	b29b      	uxth	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff49 	bl	800080e <HTFT_vWrite_Data>
	/* X End Position*/
	HTFT_vWrite_Data(X_End >>8);          /*send higher byte*/
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff43 	bl	800080e <HTFT_vWrite_Data>
	HTFT_vWrite_Data(X_End & 0x00ff);    /*send lower Byte */
 8000988:	887b      	ldrh	r3, [r7, #2]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	b29b      	uxth	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff3d 	bl	800080e <HTFT_vWrite_Data>

	/*	Set Y_ADRESS */
	HTFT_vWrite_Command(SET_Y_ADDRESS);
 8000994:	202b      	movs	r0, #43	; 0x2b
 8000996:	f7ff ff27 	bl	80007e8 <HTFT_vWrite_Command>
	/* Y Start Position*/
	HTFT_vWrite_Data(Y_Start >>8);      		/*send higher byte*/
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff34 	bl	800080e <HTFT_vWrite_Data>
	HTFT_vWrite_Data(Y_Start & 0x00ff);		/*send lower Byte */
 80009a6:	88bb      	ldrh	r3, [r7, #4]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff2e 	bl	800080e <HTFT_vWrite_Data>
	/* Y End Position*/
	HTFT_vWrite_Data(Y_End >>8);          /*send higher byte*/
 80009b2:	883b      	ldrh	r3, [r7, #0]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff28 	bl	800080e <HTFT_vWrite_Data>
	HTFT_vWrite_Data(Y_End & 0x00ff);    /*send lower Byte */
 80009be:	883b      	ldrh	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff22 	bl	800080e <HTFT_vWrite_Data>
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd90      	pop	{r4, r7, pc}

080009d2 <HTFT_vDrawPic>:
		HTFT_vWrite_Data(Copy_Image[Counter] & 0x00ff);	/* Write The LOW  Byte */
	}
}

void HTFT_vDrawPic(U16 X_Start,U16 X_End, U16 Y_Start, U16 Y_End, const U16* Copy_Image)
{
 80009d2:	b590      	push	{r4, r7, lr}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4604      	mov	r4, r0
 80009da:	4608      	mov	r0, r1
 80009dc:	4611      	mov	r1, r2
 80009de:	461a      	mov	r2, r3
 80009e0:	4623      	mov	r3, r4
 80009e2:	80fb      	strh	r3, [r7, #6]
 80009e4:	4603      	mov	r3, r0
 80009e6:	80bb      	strh	r3, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	807b      	strh	r3, [r7, #2]
 80009ec:	4613      	mov	r3, r2
 80009ee:	803b      	strh	r3, [r7, #0]
	U32 Counter =0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
	U32 Local_u32Size = (X_End - X_Start) * (Y_End - Y_Start); 	/*calculate image element numbers*/
 80009f4:	88ba      	ldrh	r2, [r7, #4]
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	8839      	ldrh	r1, [r7, #0]
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	1a8a      	subs	r2, r1, r2
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	60bb      	str	r3, [r7, #8]
	HTFT_vSetCursorPosition(X_Start, Y_Start, X_End, Y_End);    /*set addresses of x and y */
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	88ba      	ldrh	r2, [r7, #4]
 8000a0a:	8879      	ldrh	r1, [r7, #2]
 8000a0c:	88f8      	ldrh	r0, [r7, #6]
 8000a0e:	f7ff ff97 	bl	8000940 <HTFT_vSetCursorPosition>

	/* RAM Write Command Every thing is coming After This Command Display on TFT*/
	HTFT_vWrite_Command(RAM_WRITE);
 8000a12:	202c      	movs	r0, #44	; 0x2c
 8000a14:	f7ff fee8 	bl	80007e8 <HTFT_vWrite_Command>
	for(Counter = 0 ; Counter < Local_u32Size+5; Counter ++)	/*5 for protus*/
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e016      	b.n	8000a4c <HTFT_vDrawPic+0x7a>
	{
		/* Write For One Pixel The High Byte Then Low Byte For Each Pixel */
		HTFT_vWrite_Data(Copy_Image[Counter] >> 8);		/* Write The High Byte */
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	6a3a      	ldr	r2, [r7, #32]
 8000a24:	4413      	add	r3, r2
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff feee 	bl	800080e <HTFT_vWrite_Data>
		HTFT_vWrite_Data(Copy_Image[Counter] & 0x00ff);	/* Write The LOW  Byte */
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	6a3a      	ldr	r2, [r7, #32]
 8000a38:	4413      	add	r3, r2
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fee4 	bl	800080e <HTFT_vWrite_Data>
	for(Counter = 0 ; Counter < Local_u32Size+5; Counter ++)	/*5 for protus*/
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3305      	adds	r3, #5
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3e3      	bcc.n	8000a1e <HTFT_vDrawPic+0x4c>
	}
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}

08000a60 <EXTI0_IRQHandler>:
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <EXTI0_IRQHandler+0x1c>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <EXTI0_IRQHandler+0x1c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6153      	str	r3, [r2, #20]
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <EXTI0_IRQHandler+0x20>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4798      	blx	r3
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40013c00 	.word	0x40013c00
 8000a80:	20000024 	.word	0x20000024

08000a84 <EXTI1_IRQHandler>:
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <EXTI1_IRQHandler+0x1c>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <EXTI1_IRQHandler+0x1c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6153      	str	r3, [r2, #20]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <EXTI1_IRQHandler+0x20>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4798      	blx	r3
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40013c00 	.word	0x40013c00
 8000aa4:	20000028 	.word	0x20000028

08000aa8 <MGPIO_vSetPinMode>:
 */

#include "MCAL_GPIO_Interface.h"

void MGPIO_vSetPinMode(U8 PortName, U8 PinNum, U8 DirectionMode)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	71bb      	strb	r3, [r7, #6]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	717b      	strb	r3, [r7, #5]
	/* INPUT_MODE, OUTPUT_MODE, ALTERNATE_FUNCTION_MODE, ANALOG_MODE */
	switch(PortName)
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d857      	bhi.n	8000b70 <MGPIO_vSetPinMode+0xc8>
 8000ac0:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <MGPIO_vSetPinMode+0x20>)
 8000ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac6:	bf00      	nop
 8000ac8:	08000ae1 	.word	0x08000ae1
 8000acc:	08000af9 	.word	0x08000af9
 8000ad0:	08000b11 	.word	0x08000b11
 8000ad4:	08000b29 	.word	0x08000b29
 8000ad8:	08000b41 	.word	0x08000b41
 8000adc:	08000b59 	.word	0x08000b59
	{
	    //GIVE_BIT(GPIOA_SPTR->GPIO_MODER.RegisterAccess, 2U* PinNum, (U32)DirectionMode) ; break;
		case GPIOA_PORT :GPIOA_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MGPIO_vSetPinMode+0xd8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	7979      	ldrb	r1, [r7, #5]
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	0052      	lsls	r2, r2, #1
 8000aea:	fa01 f202 	lsl.w	r2, r1, r2
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <MGPIO_vSetPinMode+0xd8>)
 8000af2:	430b      	orrs	r3, r1
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e03c      	b.n	8000b72 <MGPIO_vSetPinMode+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MGPIO_vSetPinMode+0xdc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	7979      	ldrb	r1, [r7, #5]
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	0052      	lsls	r2, r2, #1
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	4611      	mov	r1, r2
 8000b08:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <MGPIO_vSetPinMode+0xdc>)
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e030      	b.n	8000b72 <MGPIO_vSetPinMode+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MGPIO_vSetPinMode+0xe0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	7979      	ldrb	r1, [r7, #5]
 8000b16:	79ba      	ldrb	r2, [r7, #6]
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <MGPIO_vSetPinMode+0xe0>)
 8000b22:	430b      	orrs	r3, r1
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e024      	b.n	8000b72 <MGPIO_vSetPinMode+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MGPIO_vSetPinMode+0xe4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	7979      	ldrb	r1, [r7, #5]
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	0052      	lsls	r2, r2, #1
 8000b32:	fa01 f202 	lsl.w	r2, r1, r2
 8000b36:	4611      	mov	r1, r2
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <MGPIO_vSetPinMode+0xe4>)
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e018      	b.n	8000b72 <MGPIO_vSetPinMode+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MGPIO_vSetPinMode+0xe8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	7979      	ldrb	r1, [r7, #5]
 8000b46:	79ba      	ldrb	r2, [r7, #6]
 8000b48:	0052      	lsls	r2, r2, #1
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <MGPIO_vSetPinMode+0xe8>)
 8000b52:	430b      	orrs	r3, r1
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e00c      	b.n	8000b72 <MGPIO_vSetPinMode+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MGPIO_vSetPinMode+0xec>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	7979      	ldrb	r1, [r7, #5]
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	0052      	lsls	r2, r2, #1
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	4611      	mov	r1, r2
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <MGPIO_vSetPinMode+0xec>)
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e000      	b.n	8000b72 <MGPIO_vSetPinMode+0xca>
		default : /*ERROR*/ break ;
 8000b70:	bf00      	nop
    }
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40021c00 	.word	0x40021c00

08000b98 <MGPIO_vSetPinOutputType>:
		default : /*ERROR*/ break ;
    }
}

void MGPIO_vSetPinOutputType(U8 PortName, U8 PinNum, U8 OutPutType)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	71bb      	strb	r3, [r7, #6]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	717b      	strb	r3, [r7, #5]
	/*OUTPUT_PUSH_PULL_TYPE, OUTPUT_OPEN_DRAIN_TYPE*/
	switch(PortName)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b05      	cmp	r3, #5
 8000bae:	d851      	bhi.n	8000c54 <MGPIO_vSetPinOutputType+0xbc>
 8000bb0:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <MGPIO_vSetPinOutputType+0x20>)
 8000bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb6:	bf00      	nop
 8000bb8:	08000bd1 	.word	0x08000bd1
 8000bbc:	08000be7 	.word	0x08000be7
 8000bc0:	08000bfd 	.word	0x08000bfd
 8000bc4:	08000c13 	.word	0x08000c13
 8000bc8:	08000c29 	.word	0x08000c29
 8000bcc:	08000c3f 	.word	0x08000c3f
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MGPIO_vSetPinOutputType+0xcc>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	7979      	ldrb	r1, [r7, #5]
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <MGPIO_vSetPinOutputType+0xcc>)
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6053      	str	r3, [r2, #4]
 8000be4:	e037      	b.n	8000c56 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <MGPIO_vSetPinOutputType+0xd0>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	7979      	ldrb	r1, [r7, #5]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <MGPIO_vSetPinOutputType+0xd0>)
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	6053      	str	r3, [r2, #4]
 8000bfa:	e02c      	b.n	8000c56 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MGPIO_vSetPinOutputType+0xd4>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	7979      	ldrb	r1, [r7, #5]
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MGPIO_vSetPinOutputType+0xd4>)
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6053      	str	r3, [r2, #4]
 8000c10:	e021      	b.n	8000c56 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MGPIO_vSetPinOutputType+0xd8>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	7979      	ldrb	r1, [r7, #5]
 8000c18:	79ba      	ldrb	r2, [r7, #6]
 8000c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <MGPIO_vSetPinOutputType+0xd8>)
 8000c22:	430b      	orrs	r3, r1
 8000c24:	6053      	str	r3, [r2, #4]
 8000c26:	e016      	b.n	8000c56 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MGPIO_vSetPinOutputType+0xdc>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	7979      	ldrb	r1, [r7, #5]
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	fa01 f202 	lsl.w	r2, r1, r2
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <MGPIO_vSetPinOutputType+0xdc>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	6053      	str	r3, [r2, #4]
 8000c3c:	e00b      	b.n	8000c56 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MGPIO_vSetPinOutputType+0xe0>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	7979      	ldrb	r1, [r7, #5]
 8000c44:	79ba      	ldrb	r2, [r7, #6]
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <MGPIO_vSetPinOutputType+0xe0>)
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	6053      	str	r3, [r2, #4]
 8000c52:	e000      	b.n	8000c56 <MGPIO_vSetPinOutputType+0xbe>
		default : /*ERROR*/ break ;
 8000c54:	bf00      	nop
     }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40021c00 	.word	0x40021c00

08000c7c <MGPIO_vSetPinOutputSpeed>:

void MGPIO_vSetPinOutputSpeed(U8 PortName, U8 PinNum, U8 OutputSpeed)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	460b      	mov	r3, r1
 8000c88:	71bb      	strb	r3, [r7, #6]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	717b      	strb	r3, [r7, #5]
	/*OUTPUT_LOW_SPEED, OUTPUT_MEDUIM_SPEED, OUTPUT_HIGH_SPEED, OUTPUT_VERY_HIGH_SPEED*/
	switch(PortName)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d857      	bhi.n	8000d44 <MGPIO_vSetPinOutputSpeed+0xc8>
 8000c94:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <MGPIO_vSetPinOutputSpeed+0x20>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000cb5 	.word	0x08000cb5
 8000ca0:	08000ccd 	.word	0x08000ccd
 8000ca4:	08000ce5 	.word	0x08000ce5
 8000ca8:	08000cfd 	.word	0x08000cfd
 8000cac:	08000d15 	.word	0x08000d15
 8000cb0:	08000d2d 	.word	0x08000d2d
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <MGPIO_vSetPinOutputSpeed+0xd8>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	7979      	ldrb	r1, [r7, #5]
 8000cba:	79ba      	ldrb	r2, [r7, #6]
 8000cbc:	0052      	lsls	r2, r2, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MGPIO_vSetPinOutputSpeed+0xd8>)
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6093      	str	r3, [r2, #8]
 8000cca:	e03c      	b.n	8000d46 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MGPIO_vSetPinOutputSpeed+0xdc>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	7979      	ldrb	r1, [r7, #5]
 8000cd2:	79ba      	ldrb	r2, [r7, #6]
 8000cd4:	0052      	lsls	r2, r2, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <MGPIO_vSetPinOutputSpeed+0xdc>)
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6093      	str	r3, [r2, #8]
 8000ce2:	e030      	b.n	8000d46 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MGPIO_vSetPinOutputSpeed+0xe0>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	7979      	ldrb	r1, [r7, #5]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0052      	lsls	r2, r2, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <MGPIO_vSetPinOutputSpeed+0xe0>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6093      	str	r3, [r2, #8]
 8000cfa:	e024      	b.n	8000d46 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MGPIO_vSetPinOutputSpeed+0xe4>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	7979      	ldrb	r1, [r7, #5]
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	0052      	lsls	r2, r2, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <MGPIO_vSetPinOutputSpeed+0xe4>)
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	6093      	str	r3, [r2, #8]
 8000d12:	e018      	b.n	8000d46 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MGPIO_vSetPinOutputSpeed+0xe8>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	7979      	ldrb	r1, [r7, #5]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	0052      	lsls	r2, r2, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	4611      	mov	r1, r2
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <MGPIO_vSetPinOutputSpeed+0xe8>)
 8000d26:	430b      	orrs	r3, r1
 8000d28:	6093      	str	r3, [r2, #8]
 8000d2a:	e00c      	b.n	8000d46 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MGPIO_vSetPinOutputSpeed+0xec>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	7979      	ldrb	r1, [r7, #5]
 8000d32:	79ba      	ldrb	r2, [r7, #6]
 8000d34:	0052      	lsls	r2, r2, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <MGPIO_vSetPinOutputSpeed+0xec>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6093      	str	r3, [r2, #8]
 8000d42:	e000      	b.n	8000d46 <MGPIO_vSetPinOutputSpeed+0xca>
		default : /*ERROR*/ break ;
 8000d44:	bf00      	nop
	}
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40021c00 	.word	0x40021c00

08000d6c <MGPIO_vSetPinPullType>:

void MGPIO_vSetPinPullType(U8 PortName, U8 PinNum, U8 PullType)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	460b      	mov	r3, r1
 8000d78:	71bb      	strb	r3, [r7, #6]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	717b      	strb	r3, [r7, #5]
	/*PULL_OFF_STATE, PULL_UP_STATE, PULL_DOWN_STATE*/
	switch(PortName)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b05      	cmp	r3, #5
 8000d82:	d857      	bhi.n	8000e34 <MGPIO_vSetPinPullType+0xc8>
 8000d84:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <MGPIO_vSetPinPullType+0x20>)
 8000d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8a:	bf00      	nop
 8000d8c:	08000da5 	.word	0x08000da5
 8000d90:	08000dbd 	.word	0x08000dbd
 8000d94:	08000dd5 	.word	0x08000dd5
 8000d98:	08000ded 	.word	0x08000ded
 8000d9c:	08000e05 	.word	0x08000e05
 8000da0:	08000e1d 	.word	0x08000e1d
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_PUPDR.RegisterAccess |= (U32)(PullType<<(2U* PinNum)) ; break;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MGPIO_vSetPinPullType+0xd8>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	7979      	ldrb	r1, [r7, #5]
 8000daa:	79ba      	ldrb	r2, [r7, #6]
 8000dac:	0052      	lsls	r2, r2, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4611      	mov	r1, r2
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <MGPIO_vSetPinPullType+0xd8>)
 8000db6:	430b      	orrs	r3, r1
 8000db8:	60d3      	str	r3, [r2, #12]
 8000dba:	e03c      	b.n	8000e36 <MGPIO_vSetPinPullType+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_PUPDR.RegisterAccess |= (U32)(PullType<<(2U* PinNum)) ; break;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MGPIO_vSetPinPullType+0xdc>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	7979      	ldrb	r1, [r7, #5]
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	0052      	lsls	r2, r2, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <MGPIO_vSetPinPullType+0xdc>)
 8000dce:	430b      	orrs	r3, r1
 8000dd0:	60d3      	str	r3, [r2, #12]
 8000dd2:	e030      	b.n	8000e36 <MGPIO_vSetPinPullType+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_PUPDR.RegisterAccess |= (U32)(PullType<<(2U* PinNum)) ; break;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MGPIO_vSetPinPullType+0xe0>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	7979      	ldrb	r1, [r7, #5]
 8000dda:	79ba      	ldrb	r2, [r7, #6]
 8000ddc:	0052      	lsls	r2, r2, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <MGPIO_vSetPinPullType+0xe0>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	60d3      	str	r3, [r2, #12]
 8000dea:	e024      	b.n	8000e36 <MGPIO_vSetPinPullType+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_PUPDR.RegisterAccess |= (U32)(PullType<<(2U* PinNum)) ; break;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MGPIO_vSetPinPullType+0xe4>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	7979      	ldrb	r1, [r7, #5]
 8000df2:	79ba      	ldrb	r2, [r7, #6]
 8000df4:	0052      	lsls	r2, r2, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <MGPIO_vSetPinPullType+0xe4>)
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	60d3      	str	r3, [r2, #12]
 8000e02:	e018      	b.n	8000e36 <MGPIO_vSetPinPullType+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_PUPDR.RegisterAccess |= (U32)(PullType<<(2U* PinNum)) ; break;
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MGPIO_vSetPinPullType+0xe8>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	7979      	ldrb	r1, [r7, #5]
 8000e0a:	79ba      	ldrb	r2, [r7, #6]
 8000e0c:	0052      	lsls	r2, r2, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	4611      	mov	r1, r2
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MGPIO_vSetPinPullType+0xe8>)
 8000e16:	430b      	orrs	r3, r1
 8000e18:	60d3      	str	r3, [r2, #12]
 8000e1a:	e00c      	b.n	8000e36 <MGPIO_vSetPinPullType+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_PUPDR.RegisterAccess |= (U32)(PullType<<(2U* PinNum)) ; break;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MGPIO_vSetPinPullType+0xec>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	7979      	ldrb	r1, [r7, #5]
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	0052      	lsls	r2, r2, #1
 8000e26:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <MGPIO_vSetPinPullType+0xec>)
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	60d3      	str	r3, [r2, #12]
 8000e32:	e000      	b.n	8000e36 <MGPIO_vSetPinPullType+0xca>
		default : /*ERROR*/ break ;
 8000e34:	bf00      	nop
	}
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021c00 	.word	0x40021c00

08000e5c <MGPIO_U8ReadPinData>:

U8 MGPIO_U8ReadPinData(U8 PortName, U8 PinNum)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	U8 L_U8Pin_Read_Data =0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
	switch(PortName)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	d84a      	bhi.n	8000f0c <MGPIO_U8ReadPinData+0xb0>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <MGPIO_U8ReadPinData+0x20>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000ea9 	.word	0x08000ea9
 8000e84:	08000ebd 	.word	0x08000ebd
 8000e88:	08000ed1 	.word	0x08000ed1
 8000e8c:	08000ee5 	.word	0x08000ee5
 8000e90:	08000ef9 	.word	0x08000ef9
	{
		case GPIOA_PORT :L_U8Pin_Read_Data = GET_BIT(GPIOA_SPTR->GPIO_IDR.RegisterAccess, PinNum) ; break;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MGPIO_U8ReadPinData+0xc0>)
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e032      	b.n	8000f0e <MGPIO_U8ReadPinData+0xb2>
		case GPIOB_PORT :L_U8Pin_Read_Data = GET_BIT(GPIOB_SPTR->GPIO_IDR.RegisterAccess, PinNum) ; break;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MGPIO_U8ReadPinData+0xc4>)
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e028      	b.n	8000f0e <MGPIO_U8ReadPinData+0xb2>
		case GPIOC_PORT :L_U8Pin_Read_Data = GET_BIT(GPIOC_SPTR->GPIO_IDR.RegisterAccess, PinNum) ; break;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MGPIO_U8ReadPinData+0xc8>)
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e01e      	b.n	8000f0e <MGPIO_U8ReadPinData+0xb2>
		case GPIOD_PORT :L_U8Pin_Read_Data = GET_BIT(GPIOD_SPTR->GPIO_IDR.RegisterAccess, PinNum) ; break;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MGPIO_U8ReadPinData+0xcc>)
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e014      	b.n	8000f0e <MGPIO_U8ReadPinData+0xb2>
		case GPIOE_PORT :L_U8Pin_Read_Data = GET_BIT(GPIOE_SPTR->GPIO_IDR.RegisterAccess, PinNum) ; break;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MGPIO_U8ReadPinData+0xd0>)
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	fa22 f303 	lsr.w	r3, r2, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e00a      	b.n	8000f0e <MGPIO_U8ReadPinData+0xb2>
		case GPIOH_PORT :L_U8Pin_Read_Data = GET_BIT(GPIOH_SPTR->GPIO_IDR.RegisterAccess, PinNum) ; break;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MGPIO_U8ReadPinData+0xd4>)
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	fa22 f303 	lsr.w	r3, r2, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e000      	b.n	8000f0e <MGPIO_U8ReadPinData+0xb2>
		default : /*ERROR*/ break ;
 8000f0c:	bf00      	nop
	}
	return L_U8Pin_Read_Data;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40021c00 	.word	0x40021c00

08000f34 <MGPIO_vWritePinData>:
	}
	return L_U8Pin_Read_Data;
}

void MGPIO_vWritePinData(U8 PortName, U8 PinNum, U8 OutputState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	4613      	mov	r3, r2
 8000f44:	717b      	strb	r3, [r7, #5]
	/*LOW_STATE, HIGH_STATE*/
	switch(OutputState)
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <MGPIO_vWritePinData+0x1e>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d05d      	beq.n	800100c <MGPIO_vWritePinData+0xd8>
				case GPIOE_PORT :SET_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
				case GPIOH_PORT :SET_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
				default : /*ERROR*/ break ;
			}
		break ;
		default : /*ERROR*/ break ;
 8000f50:	e0b2      	b.n	80010b8 <MGPIO_vWritePinData+0x184>
			switch(PortName)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d857      	bhi.n	8001008 <MGPIO_vWritePinData+0xd4>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <MGPIO_vWritePinData+0x2c>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08000f91 	.word	0x08000f91
 8000f68:	08000fa9 	.word	0x08000fa9
 8000f6c:	08000fc1 	.word	0x08000fc1
 8000f70:	08000fd9 	.word	0x08000fd9
 8000f74:	08000ff1 	.word	0x08000ff1
				case GPIOA_PORT :CLR_BIT(GPIOA_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000f78:	4b52      	ldr	r3, [pc, #328]	; (80010c4 <MGPIO_vWritePinData+0x190>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	79ba      	ldrb	r2, [r7, #6]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	4611      	mov	r1, r2
 8000f88:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <MGPIO_vWritePinData+0x190>)
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	e03c      	b.n	800100a <MGPIO_vWritePinData+0xd6>
				case GPIOB_PORT :CLR_BIT(GPIOB_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <MGPIO_vWritePinData+0x194>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <MGPIO_vWritePinData+0x194>)
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	e030      	b.n	800100a <MGPIO_vWritePinData+0xd6>
				case GPIOC_PORT :CLR_BIT(GPIOC_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000fa8:	4b48      	ldr	r3, [pc, #288]	; (80010cc <MGPIO_vWritePinData+0x198>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	43d2      	mvns	r2, r2
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4a44      	ldr	r2, [pc, #272]	; (80010cc <MGPIO_vWritePinData+0x198>)
 8000fba:	400b      	ands	r3, r1
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	e024      	b.n	800100a <MGPIO_vWritePinData+0xd6>
				case GPIOD_PORT :CLR_BIT(GPIOD_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000fc0:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <MGPIO_vWritePinData+0x19c>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	79ba      	ldrb	r2, [r7, #6]
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	43d2      	mvns	r2, r2
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <MGPIO_vWritePinData+0x19c>)
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	e018      	b.n	800100a <MGPIO_vWritePinData+0xd6>
				case GPIOE_PORT :CLR_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <MGPIO_vWritePinData+0x1a0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	79ba      	ldrb	r2, [r7, #6]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <MGPIO_vWritePinData+0x1a0>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	e00c      	b.n	800100a <MGPIO_vWritePinData+0xd6>
				case GPIOH_PORT :CLR_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MGPIO_vWritePinData+0x1a4>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	79ba      	ldrb	r2, [r7, #6]
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	43d2      	mvns	r2, r2
 8000ffe:	4611      	mov	r1, r2
 8001000:	4a35      	ldr	r2, [pc, #212]	; (80010d8 <MGPIO_vWritePinData+0x1a4>)
 8001002:	400b      	ands	r3, r1
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	e000      	b.n	800100a <MGPIO_vWritePinData+0xd6>
				default : /*ERROR*/ break ;
 8001008:	bf00      	nop
		break ;
 800100a:	e055      	b.n	80010b8 <MGPIO_vWritePinData+0x184>
			switch(PortName)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d850      	bhi.n	80010b4 <MGPIO_vWritePinData+0x180>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <MGPIO_vWritePinData+0xe4>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001031 	.word	0x08001031
 800101c:	08001047 	.word	0x08001047
 8001020:	0800105d 	.word	0x0800105d
 8001024:	08001073 	.word	0x08001073
 8001028:	08001089 	.word	0x08001089
 800102c:	0800109f 	.word	0x0800109f
				case GPIOA_PORT :SET_BIT(GPIOA_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MGPIO_vWritePinData+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <MGPIO_vWritePinData+0x190>)
 8001040:	430b      	orrs	r3, r1
 8001042:	6153      	str	r3, [r2, #20]
 8001044:	e037      	b.n	80010b6 <MGPIO_vWritePinData+0x182>
				case GPIOB_PORT :SET_BIT(GPIOB_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MGPIO_vWritePinData+0x194>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	79ba      	ldrb	r2, [r7, #6]
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	4611      	mov	r1, r2
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MGPIO_vWritePinData+0x194>)
 8001056:	430b      	orrs	r3, r1
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	e02c      	b.n	80010b6 <MGPIO_vWritePinData+0x182>
				case GPIOC_PORT :SET_BIT(GPIOC_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MGPIO_vWritePinData+0x198>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	4611      	mov	r1, r2
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MGPIO_vWritePinData+0x198>)
 800106c:	430b      	orrs	r3, r1
 800106e:	6153      	str	r3, [r2, #20]
 8001070:	e021      	b.n	80010b6 <MGPIO_vWritePinData+0x182>
				case GPIOD_PORT :SET_BIT(GPIOD_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MGPIO_vWritePinData+0x19c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	79ba      	ldrb	r2, [r7, #6]
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4611      	mov	r1, r2
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MGPIO_vWritePinData+0x19c>)
 8001082:	430b      	orrs	r3, r1
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	e016      	b.n	80010b6 <MGPIO_vWritePinData+0x182>
				case GPIOE_PORT :SET_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MGPIO_vWritePinData+0x1a0>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <MGPIO_vWritePinData+0x1a0>)
 8001098:	430b      	orrs	r3, r1
 800109a:	6153      	str	r3, [r2, #20]
 800109c:	e00b      	b.n	80010b6 <MGPIO_vWritePinData+0x182>
				case GPIOH_PORT :SET_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MGPIO_vWritePinData+0x1a4>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f202 	lsl.w	r2, r1, r2
 80010aa:	4611      	mov	r1, r2
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <MGPIO_vWritePinData+0x1a4>)
 80010ae:	430b      	orrs	r3, r1
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	e000      	b.n	80010b6 <MGPIO_vWritePinData+0x182>
				default : /*ERROR*/ break ;
 80010b4:	bf00      	nop
		break ;
 80010b6:	bf00      	nop
	}
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021c00 	.word	0x40021c00

080010dc <MGPIO_vSetPinAltFun>:
		default : /*ERROR*/ break ;
	}
}

void MGPIO_vSetPinAltFun(U8 PortName, U8 PinNum, U8 ALTFUN )
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	460b      	mov	r3, r1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	4613      	mov	r3, r2
 80010ec:	717b      	strb	r3, [r7, #5]
	if(PinNum <=7U)
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	2b07      	cmp	r3, #7
 80010f2:	d85b      	bhi.n	80011ac <MGPIO_vSetPinAltFun+0xd0>
	{
		switch(PortName)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	f200 80b6 	bhi.w	8001268 <MGPIO_vSetPinAltFun+0x18c>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <MGPIO_vSetPinAltFun+0x28>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	0800111d 	.word	0x0800111d
 8001108:	08001135 	.word	0x08001135
 800110c:	0800114d 	.word	0x0800114d
 8001110:	08001165 	.word	0x08001165
 8001114:	0800117d 	.word	0x0800117d
 8001118:	08001195 	.word	0x08001195
		{
			 case GPIOA_PORT  : GPIOA_SPTR->GPIO_AFRL.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <MGPIO_vSetPinAltFun+0x1a0>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	7979      	ldrb	r1, [r7, #5]
 8001122:	79ba      	ldrb	r2, [r7, #6]
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	4611      	mov	r1, r2
 800112c:	4a53      	ldr	r2, [pc, #332]	; (800127c <MGPIO_vSetPinAltFun+0x1a0>)
 800112e:	430b      	orrs	r3, r1
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	e09c      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOB_PORT  : GPIOB_SPTR->GPIO_AFRL.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001134:	4b52      	ldr	r3, [pc, #328]	; (8001280 <MGPIO_vSetPinAltFun+0x1a4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	7979      	ldrb	r1, [r7, #5]
 800113a:	79ba      	ldrb	r2, [r7, #6]
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4611      	mov	r1, r2
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <MGPIO_vSetPinAltFun+0x1a4>)
 8001146:	430b      	orrs	r3, r1
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	e090      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOC_PORT  : GPIOC_SPTR->GPIO_AFRL.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 800114c:	4b4d      	ldr	r3, [pc, #308]	; (8001284 <MGPIO_vSetPinAltFun+0x1a8>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	7979      	ldrb	r1, [r7, #5]
 8001152:	79ba      	ldrb	r2, [r7, #6]
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	4611      	mov	r1, r2
 800115c:	4a49      	ldr	r2, [pc, #292]	; (8001284 <MGPIO_vSetPinAltFun+0x1a8>)
 800115e:	430b      	orrs	r3, r1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	e084      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOD_PORT  : GPIOD_SPTR->GPIO_AFRL.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MGPIO_vSetPinAltFun+0x1ac>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	7979      	ldrb	r1, [r7, #5]
 800116a:	79ba      	ldrb	r2, [r7, #6]
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	4611      	mov	r1, r2
 8001174:	4a44      	ldr	r2, [pc, #272]	; (8001288 <MGPIO_vSetPinAltFun+0x1ac>)
 8001176:	430b      	orrs	r3, r1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	e078      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOE_PORT  : GPIOE_SPTR->GPIO_AFRL.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 800117c:	4b43      	ldr	r3, [pc, #268]	; (800128c <MGPIO_vSetPinAltFun+0x1b0>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	7979      	ldrb	r1, [r7, #5]
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4611      	mov	r1, r2
 800118c:	4a3f      	ldr	r2, [pc, #252]	; (800128c <MGPIO_vSetPinAltFun+0x1b0>)
 800118e:	430b      	orrs	r3, r1
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	e06c      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOH_PORT  : GPIOH_SPTR->GPIO_AFRL.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <MGPIO_vSetPinAltFun+0x1b4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	7979      	ldrb	r1, [r7, #5]
 800119a:	79ba      	ldrb	r2, [r7, #6]
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	4611      	mov	r1, r2
 80011a4:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <MGPIO_vSetPinAltFun+0x1b4>)
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e060      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 default : /*ERROR*/ break ;
		}
	}
	else
	{
		PinNum %=8;
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	71bb      	strb	r3, [r7, #6]
		switch(PortName)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b05      	cmp	r3, #5
 80011b8:	d858      	bhi.n	800126c <MGPIO_vSetPinAltFun+0x190>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <MGPIO_vSetPinAltFun+0xe4>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011f1 	.word	0x080011f1
 80011c8:	08001209 	.word	0x08001209
 80011cc:	08001221 	.word	0x08001221
 80011d0:	08001239 	.word	0x08001239
 80011d4:	08001251 	.word	0x08001251
		{
			 case GPIOA_PORT  : GPIOA_SPTR->GPIO_AFRH.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MGPIO_vSetPinAltFun+0x1a0>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	7979      	ldrb	r1, [r7, #5]
 80011de:	79ba      	ldrb	r2, [r7, #6]
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	4611      	mov	r1, r2
 80011e8:	4a24      	ldr	r2, [pc, #144]	; (800127c <MGPIO_vSetPinAltFun+0x1a0>)
 80011ea:	430b      	orrs	r3, r1
 80011ec:	6253      	str	r3, [r2, #36]	; 0x24
 80011ee:	e03e      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOB_PORT  : GPIOB_SPTR->GPIO_AFRH.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MGPIO_vSetPinAltFun+0x1a4>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	7979      	ldrb	r1, [r7, #5]
 80011f6:	79ba      	ldrb	r2, [r7, #6]
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	4611      	mov	r1, r2
 8001200:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <MGPIO_vSetPinAltFun+0x1a4>)
 8001202:	430b      	orrs	r3, r1
 8001204:	6253      	str	r3, [r2, #36]	; 0x24
 8001206:	e032      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOC_PORT  : GPIOC_SPTR->GPIO_AFRH.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MGPIO_vSetPinAltFun+0x1a8>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	7979      	ldrb	r1, [r7, #5]
 800120e:	79ba      	ldrb	r2, [r7, #6]
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	4611      	mov	r1, r2
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <MGPIO_vSetPinAltFun+0x1a8>)
 800121a:	430b      	orrs	r3, r1
 800121c:	6253      	str	r3, [r2, #36]	; 0x24
 800121e:	e026      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOD_PORT  : GPIOD_SPTR->GPIO_AFRH.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MGPIO_vSetPinAltFun+0x1ac>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	7979      	ldrb	r1, [r7, #5]
 8001226:	79ba      	ldrb	r2, [r7, #6]
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	fa01 f202 	lsl.w	r2, r1, r2
 800122e:	4611      	mov	r1, r2
 8001230:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MGPIO_vSetPinAltFun+0x1ac>)
 8001232:	430b      	orrs	r3, r1
 8001234:	6253      	str	r3, [r2, #36]	; 0x24
 8001236:	e01a      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOE_PORT  : GPIOE_SPTR->GPIO_AFRH.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MGPIO_vSetPinAltFun+0x1b0>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	7979      	ldrb	r1, [r7, #5]
 800123e:	79ba      	ldrb	r2, [r7, #6]
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	4611      	mov	r1, r2
 8001248:	4a10      	ldr	r2, [pc, #64]	; (800128c <MGPIO_vSetPinAltFun+0x1b0>)
 800124a:	430b      	orrs	r3, r1
 800124c:	6253      	str	r3, [r2, #36]	; 0x24
 800124e:	e00e      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 case GPIOH_PORT  : GPIOH_SPTR->GPIO_AFRH.RegisterAccess |= (U32)(ALTFUN<<(4U*PinNum)) ; break ;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MGPIO_vSetPinAltFun+0x1b4>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	7979      	ldrb	r1, [r7, #5]
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	fa01 f202 	lsl.w	r2, r1, r2
 800125e:	4611      	mov	r1, r2
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <MGPIO_vSetPinAltFun+0x1b4>)
 8001262:	430b      	orrs	r3, r1
 8001264:	6253      	str	r3, [r2, #36]	; 0x24
 8001266:	e002      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 default : /*ERROR*/ break ;
 8001268:	bf00      	nop
 800126a:	e000      	b.n	800126e <MGPIO_vSetPinAltFun+0x192>
			 default : /*ERROR*/ break ;
 800126c:	bf00      	nop
		}
	}
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021c00 	.word	0x40021c00

08001294 <MRCC_vInitSystemClock>:


#include "MCAL_RCC_Interface.h"

void MRCC_vInitSystemClock(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSION);
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSEON);
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a10      	ldr	r2, [pc, #64]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_PLLON);
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012ba:	6013      	str	r3, [r2, #0]
	#if CLOCK_SOURCE == HSI		/** HSI oscillator selected as system clock**********/
		/* 1- CLK SYS --> HSI */
		CLR_BIT(RCC_SPTR->REG_RCC_CFGR.RegisterAccess, CFGR_SW0);
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC_SPTR->REG_RCC_CFGR.RegisterAccess, CFGR_SW1);
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012ce:	f023 0302 	bic.w	r3, r3, #2
 80012d2:	6093      	str	r3, [r2, #8]
		/* 2- EN HSI*/
		SET_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSION);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <MRCC_vInitSystemClock+0x58>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]
			/* Error*/
		#endif
	#else
		/* Error*/
	#endif
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <MRCC_vEnableBusClock>:

void MRCC_vEnableBusClock(U8 AxBxENR_RCC_Bus ,U8 Peripheral_PPxx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
	switch(AxBxENR_RCC_Bus)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d836      	bhi.n	8001374 <MRCC_vEnableBusClock+0x84>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <MRCC_vEnableBusClock+0x1c>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001349 	.word	0x08001349
 8001318:	0800135f 	.word	0x0800135f
	{
		case Bus_AHB1:
			SET_BIT(RCC_SPTR->REG_RCC_AHB1ENR.RegisterAccess, Peripheral_PPxx);  break ;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	79ba      	ldrb	r2, [r7, #6]
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	4611      	mov	r1, r2
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 800132c:	430b      	orrs	r3, r1
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	e021      	b.n	8001376 <MRCC_vEnableBusClock+0x86>
		case Bus_AHB2:
			SET_BIT(RCC_SPTR->REG_RCC_AHB2ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	79ba      	ldrb	r2, [r7, #6]
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	4611      	mov	r1, r2
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 8001342:	430b      	orrs	r3, r1
 8001344:	6353      	str	r3, [r2, #52]	; 0x34
 8001346:	e016      	b.n	8001376 <MRCC_vEnableBusClock+0x86>
		case Bus_APB1:
			SET_BIT(RCC_SPTR->REG_RCC_APB1ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	79ba      	ldrb	r2, [r7, #6]
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	4611      	mov	r1, r2
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 8001358:	430b      	orrs	r3, r1
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	e00b      	b.n	8001376 <MRCC_vEnableBusClock+0x86>
		case Bus_APB2:
			SET_BIT(RCC_SPTR->REG_RCC_APB2ENR.RegisterAccess, Peripheral_PPxx);  break ;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	4611      	mov	r1, r2
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <MRCC_vEnableBusClock+0x94>)
 800136e:	430b      	orrs	r3, r1
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	e000      	b.n	8001376 <MRCC_vEnableBusClock+0x86>
		default :        /************ERROR*/             				break ;
 8001374:	bf00      	nop
	}
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <MSPI_vInit>:
#include "MCAL_SPI_Interface.h"

void (* MSPI1_CallBack)(void) = NULL ;

void MSPI_vInit(U8 Copy_u8SPIx)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	volatile Reg_32Bit_Utag SPI_Config_Holder ; // to hold SPIx Config

	/* 1.SET PHASE */
	SPI_Config_Holder.BitAccess.BIT0 = SPI_PHASE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]

	/* 2.SET PLO */
	SPI_Config_Holder.BitAccess.BIT1 = GET_BIT(SPI_POLARITY, 0);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	60fb      	str	r3, [r7, #12]

	/* 3.SET MASTER OR SLAVE */
	SPI_Config_Holder.BitAccess.BIT2 = GET_BIT(SPI_MASTER_SLAVE, 0);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	60fb      	str	r3, [r7, #12]

	/* 4.SET BOUD RATE */
	SPI_Config_Holder.BitAccess.BIT3 = GET_BIT(BUAD_RATE, 0);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
	SPI_Config_Holder.BitAccess.BIT4 = GET_BIT(BUAD_RATE, 1);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f36f 1304 	bfc	r3, #4, #1
 80013b8:	60fb      	str	r3, [r7, #12]
	SPI_Config_Holder.BitAccess.BIT5 = GET_BIT(BUAD_RATE, 2);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f36f 1345 	bfc	r3, #5, #1
 80013c0:	60fb      	str	r3, [r7, #12]

	/* 5.SET DATA ORDER */
	SPI_Config_Holder.BitAccess.BIT7 = GET_BIT(DATA_ORDER, 0);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f36f 13c7 	bfc	r3, #7, #1
 80013c8:	60fb      	str	r3, [r7, #12]

	/* 6.SET SSI */
	SPI_Config_Holder.BitAccess.BIT8 = GET_BIT(SSI_STATE, 0);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	60fb      	str	r3, [r7, #12]

	/* 7.SET SSM */
	SPI_Config_Holder.BitAccess.BIT9 = GET_BIT(SSM_STATE, 0);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d8:	60fb      	str	r3, [r7, #12]

	/* 8.SET DATA FORMAT */
	SPI_Config_Holder.BitAccess.BIT11 = GET_BIT(DATA_FORMAT, 0);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f36f 23cb 	bfc	r3, #11, #1
 80013e0:	60fb      	str	r3, [r7, #12]

	switch (Copy_u8SPIx)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d81a      	bhi.n	8001420 <MSPI_vInit+0x98>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <MSPI_vInit+0x68>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	08001401 	.word	0x08001401
 80013f4:	08001409 	.word	0x08001409
 80013f8:	08001411 	.word	0x08001411
 80013fc:	08001419 	.word	0x08001419
	{
	case SPI_1_ : SPI1_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <MSPI_vInit+0xa8>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e00c      	b.n	8001422 <MSPI_vInit+0x9a>
	case SPI_2_ : SPI2_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <MSPI_vInit+0xac>)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e008      	b.n	8001422 <MSPI_vInit+0x9a>
	case SPI_3_ : SPI3_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <MSPI_vInit+0xb0>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e004      	b.n	8001422 <MSPI_vInit+0x9a>
	case SPI_4_ : SPI4_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <MSPI_vInit+0xb4>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e000      	b.n	8001422 <MSPI_vInit+0x9a>
	default     : /*ERROR*/ break;
 8001420:	bf00      	nop
	}
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40013000 	.word	0x40013000
 8001434:	40003800 	.word	0x40003800
 8001438:	40003c00 	.word	0x40003c00
 800143c:	40013400 	.word	0x40013400

08001440 <MSPI_vEnable>:

void MSPI_vEnable(U8 Copy_u8SPIx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	switch (Copy_u8SPIx)
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	3b01      	subs	r3, #1
 800144e:	2b03      	cmp	r3, #3
 8001450:	d822      	bhi.n	8001498 <MSPI_vEnable+0x58>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <MSPI_vEnable+0x18>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001469 	.word	0x08001469
 800145c:	08001475 	.word	0x08001475
 8001460:	08001481 	.word	0x08001481
 8001464:	0800148d 	.word	0x0800148d
	{
	    case SPI_1_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <MSPI_vEnable+0x68>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e012      	b.n	800149a <MSPI_vEnable+0x5a>
		case SPI_2_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <MSPI_vEnable+0x68>)
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00c      	b.n	800149a <MSPI_vEnable+0x5a>
		case SPI_3_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <MSPI_vEnable+0x68>)
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e006      	b.n	800149a <MSPI_vEnable+0x5a>
		case SPI_4_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <MSPI_vEnable+0x68>)
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e000      	b.n	800149a <MSPI_vEnable+0x5a>
		default      : /*ERROR*/ break;
 8001498:	bf00      	nop
	}
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40013000 	.word	0x40013000

080014ac <MSPI1_u16TrasRes>:
		default      : /*ERROR*/ break;
	}
}

U16 MSPI1_u16TrasRes(U16 Copy_u16Data)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
	U16 L_u16Data =0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	81fb      	strh	r3, [r7, #14]
	while (GET_BIT(SPI1_SPTR->REG_SPI_SR.RegisterAccess, 7));
 80014ba:	bf00      	nop
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <MSPI1_u16TrasRes+0x48>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	09db      	lsrs	r3, r3, #7
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f8      	bne.n	80014bc <MSPI1_u16TrasRes+0x10>
	SPI1_SPTR->REG_SPI_DR.RegisterAccess = Copy_u16Data;
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <MSPI1_u16TrasRes+0x48>)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	60d3      	str	r3, [r2, #12]
	while (GET_BIT(SPI1_SPTR->REG_SPI_SR.RegisterAccess, 7));
 80014d0:	bf00      	nop
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MSPI1_u16TrasRes+0x48>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	09db      	lsrs	r3, r3, #7
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f8      	bne.n	80014d2 <MSPI1_u16TrasRes+0x26>
	L_u16Data = SPI1_SPTR->REG_SPI_DR.RegisterAccess;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <MSPI1_u16TrasRes+0x48>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	81fb      	strh	r3, [r7, #14]
	return L_u16Data;
 80014e6:	89fb      	ldrh	r3, [r7, #14]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40013000 	.word	0x40013000

080014f8 <SPI1_IRQHandler>:
	/* Set CallBack */
	MSPI1_CallBack = ptr ;
}

void SPI1_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	/* Excute Call Back*/
	MSPI1_CallBack();
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <SPI1_IRQHandler+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4798      	blx	r3
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000002c 	.word	0x2000002c

0800150c <MSTK_Init>:
static volatile U8 G_u8ReadFlag;
static U32 counter;
/*=====================================*/

void MSTK_Init(STK_CLK_SRC_t STK_CLK_SRC)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	/*Clear Val & Count flag*/
	STK_SPTR->REG_STK_VAL.RegisterAccess = 0;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MSTK_Init+0x48>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	/*Select CLK Source*/
	switch(STK_CLK_SRC)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <MSTK_Init+0x1c>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d008      	beq.n	8001538 <MSTK_Init+0x2c>
			break;
		case STK_CLK_SRC_HCLK_Div8:
			STK_SPTR->REG_STK_CTRL.RegisterAccess = 0;
			STK_CLK_Ms_Ticks=2000U;
			break;
		default :/*error*/	break;
 8001526:	e00f      	b.n	8001548 <MSTK_Init+0x3c>
			STK_SPTR->REG_STK_CTRL.RegisterAccess = 0x00000004;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MSTK_Init+0x48>)
 800152a:	2204      	movs	r2, #4
 800152c:	601a      	str	r2, [r3, #0]
			STK_CLK_Ms_Ticks=16000U;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MSTK_Init+0x4c>)
 8001530:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001534:	601a      	str	r2, [r3, #0]
			break;
 8001536:	e007      	b.n	8001548 <MSTK_Init+0x3c>
			STK_SPTR->REG_STK_CTRL.RegisterAccess = 0;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MSTK_Init+0x48>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
			STK_CLK_Ms_Ticks=2000U;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MSTK_Init+0x4c>)
 8001540:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001544:	601a      	str	r2, [r3, #0]
			break;
 8001546:	bf00      	nop
	}
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e010 	.word	0xe000e010
 8001558:	20000030 	.word	0x20000030

0800155c <MSTK_DelayMs>:
	STK_SPTR->REG_STK_VAL.RegisterAccess =0;
	STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_TICKINT;
}

void MSTK_DelayMs(U32 Copy_u32RequiredMs)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	STK_SPTR->REG_STK_LOAD.RegisterAccess = (STK_CLK_Ms_Ticks*Copy_u32RequiredMs)-1;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MSTK_DelayMs+0x50>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <MSTK_DelayMs+0x54>)
 8001570:	3b01      	subs	r3, #1
 8001572:	6053      	str	r3, [r2, #4]
	STK_SPTR->REG_STK_VAL.RegisterAccess =0;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MSTK_DelayMs+0x54>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
	STK_SPTR->REG_STK_CTRL.RegisterAccess |= STK_CTRL_ENABLE;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MSTK_DelayMs+0x54>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <MSTK_DelayMs+0x54>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
	while((STK_SPTR->REG_STK_CTRL.RegisterAccess & STK_CTRL_COUNTFLAG) == 0);
 8001586:	bf00      	nop
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MSTK_DelayMs+0x54>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f9      	beq.n	8001588 <MSTK_DelayMs+0x2c>
	STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_ENABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MSTK_DelayMs+0x54>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <MSTK_DelayMs+0x54>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	20000030 	.word	0x20000030
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <SysTick_Handler>:
	STK_pAppFun();
	STK_SPTR->REG_STK_CTRL.RegisterAccess |= 3U;
}

void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if(STK_CallBackMode != PWM)
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <SysTick_Handler+0x98>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d01a      	beq.n	80015f8 <SysTick_Handler+0x44>
	{
		if(STK_CallBackMode == ONE_TIME)
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <SysTick_Handler+0x98>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <SysTick_Handler+0x3c>
		{
			STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_ENABLE;
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <SysTick_Handler+0x9c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <SysTick_Handler+0x9c>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]
			STK_SPTR->REG_STK_LOAD.RegisterAccess =0;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <SysTick_Handler+0x9c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
			STK_SPTR->REG_STK_VAL.RegisterAccess  =0;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <SysTick_Handler+0x9c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
			STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_TICKINT;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <SysTick_Handler+0x9c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <SysTick_Handler+0x9c>)
 80015ea:	f023 0302 	bic.w	r3, r3, #2
 80015ee:	6013      	str	r3, [r2, #0]
		}
		else{/*error*/}
		STK_pAppFun();
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <SysTick_Handler+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4798      	blx	r3
 80015f6:	e01d      	b.n	8001634 <SysTick_Handler+0x80>
	}else
	{
		counter++;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <SysTick_Handler+0xa4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <SysTick_Handler+0xa4>)
 8001600:	6013      	str	r3, [r2, #0]
		if(counter == (STK_RequiredOnTime))
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <SysTick_Handler+0xa4>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <SysTick_Handler+0xa8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d103      	bne.n	8001616 <SysTick_Handler+0x62>
		{
			STK_pAppFun();
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <SysTick_Handler+0xa0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4798      	blx	r3
 8001614:	e00e      	b.n	8001634 <SysTick_Handler+0x80>
		}else if(counter == (STK_RequiredOnTime+STK_RequiredOffTime))
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <SysTick_Handler+0xa8>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <SysTick_Handler+0xac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	441a      	add	r2, r3
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <SysTick_Handler+0xa4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d105      	bne.n	8001634 <SysTick_Handler+0x80>
		{
			STK_pAppFun();
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <SysTick_Handler+0xa0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4798      	blx	r3
			counter=0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <SysTick_Handler+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
		}
	}
	G_u8ReadFlag = GET_BIT(STK_SPTR->REG_STK_CTRL.RegisterAccess, 16U);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SysTick_Handler+0x9c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <SysTick_Handler+0xb0>)
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000040 	.word	0x20000040
 8001650:	e000e010 	.word	0xe000e010
 8001654:	2000003c 	.word	0x2000003c
 8001658:	20000044 	.word	0x20000044
 800165c:	20000034 	.word	0x20000034
 8001660:	20000038 	.word	0x20000038
 8001664:	20000041 	.word	0x20000041

08001668 <main>:

#include "main.h"
U8 G_key = 0;

int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af02      	add	r7, sp, #8
	MRCC_vInitSystemClock();
 800166e:	f7ff fe11 	bl	8001294 <MRCC_vInitSystemClock>
	MSTK_Init(STK_CLK_SRC_HCLK_Div8);
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff ff4a 	bl	800150c <MSTK_Init>
	MRCC_vEnableBusClock(Bus_AHB1, PHB1_GPIOA);
 8001678:	2100      	movs	r1, #0
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fe38 	bl	80012f0 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_AHB1, PHB1_GPIOB);
 8001680:	2101      	movs	r1, #1
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff fe34 	bl	80012f0 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_AHB1, PHB1_GPIOC);
 8001688:	2102      	movs	r1, #2
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fe30 	bl	80012f0 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_AHB1, PHB1_GPIOD);
 8001690:	2103      	movs	r1, #3
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fe2c 	bl	80012f0 <MRCC_vEnableBusClock>
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	MRCC_vEnableBusClock(Bus_APB2, PPB2_SPI1);
 8001698:	210c      	movs	r1, #12
 800169a:	2003      	movs	r0, #3
 800169c:	f7ff fe28 	bl	80012f0 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_APB2, PPB2_SYSCFG);
 80016a0:	210e      	movs	r1, #14
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7ff fe24 	bl	80012f0 <MRCC_vEnableBusClock>
	//MADC_vRegularSequenceChoice(SEQ_1, CONV_15);
	//MADC_vNumberOfChannels(CONV_0);
	//MADC_vEnableDisable(ENABLE);

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	HKEYPAD_vInitiate();
 80016a8:	f7fe fdbf 	bl	800022a <HKEYPAD_vInitiate>
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	HLCD_vInitiate();
 80016ac:	f7fe fea2 	bl	80003f4 <HLCD_vInitiate>
	HLCD_vGoTo(0, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7fe ffea 	bl	800068c <HLCD_vGoTo>
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	MSPI_vInit(SPI_1_);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fe65 	bl	8001388 <MSPI_vInit>
	MSPI_vEnable(SPI_1_);
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff febe 	bl	8001440 <MSPI_vEnable>
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	HTFT_vInit();
 80016c4:	f7ff f8b6 	bl	8000834 <HTFT_vInit>
	HTFT_vDrawPic(0, 240, 0, 320, NTI_Logo);
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <main+0x160>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016d0:	2200      	movs	r2, #0
 80016d2:	21f0      	movs	r1, #240	; 0xf0
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff f97c 	bl	80009d2 <HTFT_vDrawPic>
	//HTFT_vDrawRectangle(0+LED_YLW_X_SHIFT-1,LED_YLW_X_SHIFT   , 0+LED_ORGN_Y_SHIFT,91+LED_ORGN_Y_SHIFT,0XFFFF);
	//HTFT_vDrawPic(0+AC_X_SHIFT, 80+AC_X_SHIFT, 0+AC_Y_SHIFT, 80+AC_Y_SHIFT, AC_OFF);
	//HTFT_vDrawRectangle(0+AC_X_SHIFT-1,AC_X_SHIFT   , 0+AC_Y_SHIFT,153+AC_Y_SHIFT,0XFFFF);

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_7, OUTPUT_MODE); // LED 1
 80016da:	2201      	movs	r2, #1
 80016dc:	2107      	movs	r1, #7
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff f9e2 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_1, OUTPUT_MODE); // LED 2
 80016e4:	2201      	movs	r2, #1
 80016e6:	2101      	movs	r1, #1
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff f9dd 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_2, OUTPUT_MODE); // LED 3
 80016ee:	2201      	movs	r2, #1
 80016f0:	2102      	movs	r1, #2
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff f9d8 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_3, OUTPUT_MODE); // LED 4
 80016f8:	2201      	movs	r2, #1
 80016fa:	2103      	movs	r1, #3
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff f9d3 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_7, OUTPUT_LOW_SPEED);
 8001702:	2200      	movs	r2, #0
 8001704:	2107      	movs	r1, #7
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fab8 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_1, OUTPUT_LOW_SPEED);
 800170c:	2200      	movs	r2, #0
 800170e:	2101      	movs	r1, #1
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fab3 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_2, OUTPUT_LOW_SPEED);
 8001716:	2200      	movs	r2, #0
 8001718:	2102      	movs	r1, #2
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff faae 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_3, OUTPUT_LOW_SPEED);
 8001720:	2200      	movs	r2, #0
 8001722:	2103      	movs	r1, #3
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff faa9 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_7, OUTPUT_PUSH_PULL_TYPE);
 800172a:	2200      	movs	r2, #0
 800172c:	2107      	movs	r1, #7
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fa32 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_1, OUTPUT_PUSH_PULL_TYPE);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff fa2d 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_2, OUTPUT_PUSH_PULL_TYPE);
 800173e:	2200      	movs	r2, #0
 8001740:	2102      	movs	r1, #2
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fa28 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_3, OUTPUT_PUSH_PULL_TYPE);
 8001748:	2200      	movs	r2, #0
 800174a:	2103      	movs	r1, #3
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fa23 	bl	8000b98 <MGPIO_vSetPinOutputType>

	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_4, OUTPUT_MODE); // Buzzer
 8001752:	2201      	movs	r2, #1
 8001754:	2104      	movs	r1, #4
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff f9a6 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_4, OUTPUT_LOW_SPEED);
 800175c:	2200      	movs	r2, #0
 800175e:	2104      	movs	r1, #4
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fa8b 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_4, OUTPUT_PUSH_PULL_TYPE);
 8001766:	2200      	movs	r2, #0
 8001768:	2104      	movs	r1, #4
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fa14 	bl	8000b98 <MGPIO_vSetPinOutputType>

	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_5, OUTPUT_MODE); // Motor pin1
 8001770:	2201      	movs	r2, #1
 8001772:	2105      	movs	r1, #5
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff f997 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIOB_PORT, GPIO_PIN_6, OUTPUT_MODE); // Motor pin2
 800177a:	2201      	movs	r2, #1
 800177c:	2106      	movs	r1, #6
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff f992 	bl	8000aa8 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_5, OUTPUT_LOW_SPEED);
 8001784:	2200      	movs	r2, #0
 8001786:	2105      	movs	r1, #5
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fa77 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputSpeed(GPIOB_PORT, GPIO_PIN_6, OUTPUT_LOW_SPEED);
 800178e:	2200      	movs	r2, #0
 8001790:	2106      	movs	r1, #6
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff fa72 	bl	8000c7c <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_5, OUTPUT_PUSH_PULL_TYPE);
 8001798:	2200      	movs	r2, #0
 800179a:	2105      	movs	r1, #5
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff f9fb 	bl	8000b98 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputType(GPIOB_PORT, GPIO_PIN_6, OUTPUT_PUSH_PULL_TYPE);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2106      	movs	r1, #6
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff f9f6 	bl	8000b98 <MGPIO_vSetPinOutputType>
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	HLCD_vGoTo(0,1);
 80017ac:	2101      	movs	r1, #1
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7fe ff6c 	bl	800068c <HLCD_vGoTo>
	HLCD_vWriteString((U8*)"Enter Password:");
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <main+0x164>)
 80017b6:	f7fe fffb 	bl	80007b0 <HLCD_vWriteString>
	HLCD_vGoTo(1,5);
 80017ba:	2105      	movs	r1, #5
 80017bc:	2001      	movs	r0, #1
 80017be:	f7fe ff65 	bl	800068c <HLCD_vGoTo>
	while(1)
	{
		GetPasswordFromUser();
 80017c2:	f000 f805 	bl	80017d0 <GetPasswordFromUser>
 80017c6:	e7fc      	b.n	80017c2 <main+0x15a>
 80017c8:	08002064 	.word	0x08002064
 80017cc:	08001edc 	.word	0x08001edc

080017d0 <GetPasswordFromUser>:
		HLCD_vWriteNumber(ADC_read);*/
	}
}

void GetPasswordFromUser(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	S8 static Input_Incrementer=0 ;
	S8 static Default_Password [5]="0777";
	S8 static EnteredPassword[5] ={0};
	G_key = 'P';
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <GetPasswordFromUser+0x104>)
 80017d6:	2250      	movs	r2, #80	; 0x50
 80017d8:	701a      	strb	r2, [r3, #0]
	Delay_vMilliSecond16MHzoscillator(2);
 80017da:	2002      	movs	r0, #2
 80017dc:	f7fe fcfa 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	G_key = HKEYPAD_U8READ();
 80017e0:	f7fe fda8 	bl	8000334 <HKEYPAD_U8READ>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <GetPasswordFromUser+0x104>)
 80017ea:	701a      	strb	r2, [r3, #0]

	if (G_key != 'P')
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <GetPasswordFromUser+0x104>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b50      	cmp	r3, #80	; 0x50
 80017f2:	d06d      	beq.n	80018d0 <GetPasswordFromUser+0x100>
	{
		if(G_key >= '0' && G_key <='9')
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <GetPasswordFromUser+0x104>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b2f      	cmp	r3, #47	; 0x2f
 80017fa:	d91d      	bls.n	8001838 <GetPasswordFromUser+0x68>
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <GetPasswordFromUser+0x104>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b39      	cmp	r3, #57	; 0x39
 8001802:	d819      	bhi.n	8001838 <GetPasswordFromUser+0x68>
		{
			BuzzerSound();
 8001804:	f000 f89f 	bl	8001946 <BuzzerSound>
			//HLCD_vWriteCharacter('*');
			HLCD_vWriteCharacter(G_key);
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <GetPasswordFromUser+0x104>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe ff59 	bl	80006c4 <HLCD_vWriteCharacter>
			EnteredPassword[Input_Incrementer] = G_key;
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <GetPasswordFromUser+0x104>)
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <GetPasswordFromUser+0x108>)
 8001818:	f993 3000 	ldrsb.w	r3, [r3]
 800181c:	461a      	mov	r2, r3
 800181e:	b249      	sxtb	r1, r1
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <GetPasswordFromUser+0x10c>)
 8001822:	5499      	strb	r1, [r3, r2]
			Input_Incrementer++;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <GetPasswordFromUser+0x108>)
 8001826:	f993 3000 	ldrsb.w	r3, [r3]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	b25a      	sxtb	r2, r3
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <GetPasswordFromUser+0x108>)
 8001834:	701a      	strb	r2, [r3, #0]
			}
		}
		else{	}
	}
	else{	}
}
 8001836:	e04b      	b.n	80018d0 <GetPasswordFromUser+0x100>
		else if('=' == G_key)
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <GetPasswordFromUser+0x104>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b3d      	cmp	r3, #61	; 0x3d
 800183e:	d147      	bne.n	80018d0 <GetPasswordFromUser+0x100>
			HLCD_vClearScreen();
 8001840:	f7fe ff1c 	bl	800067c <HLCD_vClearScreen>
			HLCD_vWriteString((U8*)"OK");
 8001844:	4826      	ldr	r0, [pc, #152]	; (80018e0 <GetPasswordFromUser+0x110>)
 8001846:	f7fe ffb3 	bl	80007b0 <HLCD_vWriteString>
			Delay_vMilliSecond16MHzoscillator(500);
 800184a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184e:	f7fe fcc1 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
			HLCD_vGoTo(1,1);
 8001852:	2101      	movs	r1, #1
 8001854:	2001      	movs	r0, #1
 8001856:	f7fe ff19 	bl	800068c <HLCD_vGoTo>
			BuzzerSound();
 800185a:	f000 f874 	bl	8001946 <BuzzerSound>
			if((StringCompare(EnteredPassword , Default_Password) == 1))
 800185e:	4921      	ldr	r1, [pc, #132]	; (80018e4 <GetPasswordFromUser+0x114>)
 8001860:	481e      	ldr	r0, [pc, #120]	; (80018dc <GetPasswordFromUser+0x10c>)
 8001862:	f000 f847 	bl	80018f4 <StringCompare>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d109      	bne.n	8001880 <GetPasswordFromUser+0xb0>
				HLCD_vWriteString((U8*)"Accepted Pass");
 800186c:	481e      	ldr	r0, [pc, #120]	; (80018e8 <GetPasswordFromUser+0x118>)
 800186e:	f7fe ff9f 	bl	80007b0 <HLCD_vWriteString>
				Delay_vMilliSecond16MHzoscillator(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001876:	f7fe fcad 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
				DefineUserCommand();
 800187a:	f000 f875 	bl	8001968 <DefineUserCommand>
}
 800187e:	e027      	b.n	80018d0 <GetPasswordFromUser+0x100>
				HLCD_vGoTo(1,3);
 8001880:	2103      	movs	r1, #3
 8001882:	2001      	movs	r0, #1
 8001884:	f7fe ff02 	bl	800068c <HLCD_vGoTo>
				HLCD_vWriteString((U8*)"Denied Pass");
 8001888:	4818      	ldr	r0, [pc, #96]	; (80018ec <GetPasswordFromUser+0x11c>)
 800188a:	f7fe ff91 	bl	80007b0 <HLCD_vWriteString>
				HLCD_vGoTo(1,0);
 800188e:	2100      	movs	r1, #0
 8001890:	2001      	movs	r0, #1
 8001892:	f7fe fefb 	bl	800068c <HLCD_vGoTo>
				Delay_vMilliSecond16MHzoscillator(500);
 8001896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189a:	f7fe fc9b 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
				HLCD_vWriteString((U8*)"Renter Password");
 800189e:	4814      	ldr	r0, [pc, #80]	; (80018f0 <GetPasswordFromUser+0x120>)
 80018a0:	f7fe ff86 	bl	80007b0 <HLCD_vWriteString>
				HLCD_vGoTo(2,5);
 80018a4:	2105      	movs	r1, #5
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7fe fef0 	bl	800068c <HLCD_vGoTo>
				Input_Incrementer=0;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <GetPasswordFromUser+0x108>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
				EnteredPassword[0] = 0;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <GetPasswordFromUser+0x10c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
				EnteredPassword[1] = 0;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <GetPasswordFromUser+0x10c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	705a      	strb	r2, [r3, #1]
				EnteredPassword[2] = 0;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <GetPasswordFromUser+0x10c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	709a      	strb	r2, [r3, #2]
				EnteredPassword[3] = 0;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <GetPasswordFromUser+0x10c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	70da      	strb	r2, [r3, #3]
				EnteredPassword[4] = 0;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <GetPasswordFromUser+0x10c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	711a      	strb	r2, [r3, #4]
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000048 	.word	0x20000048
 80018d8:	20000049 	.word	0x20000049
 80018dc:	2000004c 	.word	0x2000004c
 80018e0:	08001eec 	.word	0x08001eec
 80018e4:	20000000 	.word	0x20000000
 80018e8:	08001ef0 	.word	0x08001ef0
 80018ec:	08001f00 	.word	0x08001f00
 80018f0:	08001f0c 	.word	0x08001f0c

080018f4 <StringCompare>:

U8 StringCompare(S8* String1 , S8 * String2)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	while(*String1 != 0 || *String2 != 0)
 80018fe:	e013      	b.n	8001928 <StringCompare+0x34>
	{
		Delay_vMilliSecond16MHzoscillator(5);
 8001900:	2005      	movs	r0, #5
 8001902:	f7fe fc67 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
		if(*String1 == *String2){
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f993 2000 	ldrsb.w	r2, [r3]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f993 3000 	ldrsb.w	r3, [r3]
 8001912:	429a      	cmp	r2, r3
 8001914:	d106      	bne.n	8001924 <StringCompare+0x30>
			String1++;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
			String2++;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	e001      	b.n	8001928 <StringCompare+0x34>
		}
		else{
			return 0;
 8001924:	2300      	movs	r3, #0
 8001926:	e00a      	b.n	800193e <StringCompare+0x4a>
	while(*String1 != 0 || *String2 != 0)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f993 3000 	ldrsb.w	r3, [r3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e6      	bne.n	8001900 <StringCompare+0xc>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f993 3000 	ldrsb.w	r3, [r3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e1      	bne.n	8001900 <StringCompare+0xc>
		}
	}
	return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <BuzzerSound>:

void BuzzerSound(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
	MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_4, HIGH_STATE);
 800194a:	2201      	movs	r2, #1
 800194c:	2104      	movs	r1, #4
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff faf0 	bl	8000f34 <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(100);
 8001954:	2064      	movs	r0, #100	; 0x64
 8001956:	f7fe fc3d 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_4, LOW_STATE);
 800195a:	2200      	movs	r2, #0
 800195c:	2104      	movs	r1, #4
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fae8 	bl	8000f34 <MGPIO_vWritePinData>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <DefineUserCommand>:

void DefineUserCommand(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HLCD_vClearScreen();
 800196c:	f7fe fe86 	bl	800067c <HLCD_vClearScreen>
	HLCD_vGoTo(1,2);
 8001970:	2102      	movs	r1, #2
 8001972:	2001      	movs	r0, #1
 8001974:	f7fe fe8a 	bl	800068c <HLCD_vGoTo>
	HLCD_vWriteString((U8*)"Welcome Home");
 8001978:	48c4      	ldr	r0, [pc, #784]	; (8001c8c <DefineUserCommand+0x324>)
 800197a:	f7fe ff19 	bl	80007b0 <HLCD_vWriteString>
	Delay_vMilliSecond16MHzoscillator(500);
 800197e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001982:	f7fe fc27 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	HLCD_vClearScreen();
 8001986:	f7fe fe79 	bl	800067c <HLCD_vClearScreen>
	HLCD_vWriteString((U8*)"Pressed Key-> ");
 800198a:	48c1      	ldr	r0, [pc, #772]	; (8001c90 <DefineUserCommand+0x328>)
 800198c:	f7fe ff10 	bl	80007b0 <HLCD_vWriteString>
	while(1)
	{
		G_key = 'P';
 8001990:	4bc0      	ldr	r3, [pc, #768]	; (8001c94 <DefineUserCommand+0x32c>)
 8001992:	2250      	movs	r2, #80	; 0x50
 8001994:	701a      	strb	r2, [r3, #0]
		G_key = HKEYPAD_U8READ();
 8001996:	f7fe fccd 	bl	8000334 <HKEYPAD_U8READ>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4bbd      	ldr	r3, [pc, #756]	; (8001c94 <DefineUserCommand+0x32c>)
 80019a0:	701a      	strb	r2, [r3, #0]
		if (G_key != 'P')
 80019a2:	4bbc      	ldr	r3, [pc, #752]	; (8001c94 <DefineUserCommand+0x32c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b50      	cmp	r3, #80	; 0x50
 80019a8:	d0f2      	beq.n	8001990 <DefineUserCommand+0x28>
		{
			static U8 EXE_LED_0_ON_OFF =0;
			static U8 EXE_LED_1_ON_OFF =0;
			if('7'==G_key || '8'==G_key || '9'==G_key || '/'==G_key)
 80019aa:	4bba      	ldr	r3, [pc, #744]	; (8001c94 <DefineUserCommand+0x32c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b37      	cmp	r3, #55	; 0x37
 80019b0:	d00c      	beq.n	80019cc <DefineUserCommand+0x64>
 80019b2:	4bb8      	ldr	r3, [pc, #736]	; (8001c94 <DefineUserCommand+0x32c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b38      	cmp	r3, #56	; 0x38
 80019b8:	d008      	beq.n	80019cc <DefineUserCommand+0x64>
 80019ba:	4bb6      	ldr	r3, [pc, #728]	; (8001c94 <DefineUserCommand+0x32c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b39      	cmp	r3, #57	; 0x39
 80019c0:	d004      	beq.n	80019cc <DefineUserCommand+0x64>
 80019c2:	4bb4      	ldr	r3, [pc, #720]	; (8001c94 <DefineUserCommand+0x32c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b2f      	cmp	r3, #47	; 0x2f
 80019c8:	f040 80ec 	bne.w	8001ba4 <DefineUserCommand+0x23c>
			{
				switch(G_key) //Ligting control
 80019cc:	4bb1      	ldr	r3, [pc, #708]	; (8001c94 <DefineUserCommand+0x32c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3b2f      	subs	r3, #47	; 0x2f
 80019d2:	2b0a      	cmp	r3, #10
 80019d4:	f200 80e8 	bhi.w	8001ba8 <DefineUserCommand+0x240>
 80019d8:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DefineUserCommand+0x78>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	08001b57 	.word	0x08001b57
 80019e4:	08001ba9 	.word	0x08001ba9
 80019e8:	08001ba9 	.word	0x08001ba9
 80019ec:	08001ba9 	.word	0x08001ba9
 80019f0:	08001ba9 	.word	0x08001ba9
 80019f4:	08001ba9 	.word	0x08001ba9
 80019f8:	08001ba9 	.word	0x08001ba9
 80019fc:	08001ba9 	.word	0x08001ba9
 8001a00:	08001a0d 	.word	0x08001a0d
 8001a04:	08001a8b 	.word	0x08001a8b
 8001a08:	08001b09 	.word	0x08001b09
				{
				case '7': //LED1
					TOG_BIT(EXE_LED_0_ON_OFF , 0);
 8001a0c:	4ba2      	ldr	r3, [pc, #648]	; (8001c98 <DefineUserCommand+0x330>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f083 0301 	eor.w	r3, r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <DefineUserCommand+0x330>)
 8001a18:	701a      	strb	r2, [r3, #0]
					HLCD_vGoTo(0,0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7fe fe35 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001a22:	489b      	ldr	r0, [pc, #620]	; (8001c90 <DefineUserCommand+0x328>)
 8001a24:	f7fe fec4 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001a28:	210f      	movs	r1, #15
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7fe fe2e 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001a30:	4b98      	ldr	r3, [pc, #608]	; (8001c94 <DefineUserCommand+0x32c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fe45 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001a3a:	2020      	movs	r0, #32
 8001a3c:	f7fe fe42 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vGoTo(1,0);
 8001a40:	2100      	movs	r1, #0
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7fe fe22 	bl	800068c <HLCD_vGoTo>
					if(EXE_LED_0_ON_OFF== 0)
 8001a48:	4b93      	ldr	r3, [pc, #588]	; (8001c98 <DefineUserCommand+0x330>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d108      	bne.n	8001a62 <DefineUserCommand+0xfa>
					{
						HLCD_vWriteString((U8*)"LED 0 is OFF        ");
 8001a50:	4892      	ldr	r0, [pc, #584]	; (8001c9c <DefineUserCommand+0x334>)
 8001a52:	f7fe fead 	bl	80007b0 <HLCD_vWriteString>
						MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_7 ,LOW_STATE);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2107      	movs	r1, #7
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fa6a 	bl	8000f34 <MGPIO_vWritePinData>
 8001a60:	e00b      	b.n	8001a7a <DefineUserCommand+0x112>
					}
					else if(EXE_LED_0_ON_OFF == 1){
 8001a62:	4b8d      	ldr	r3, [pc, #564]	; (8001c98 <DefineUserCommand+0x330>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <DefineUserCommand+0x112>
						HLCD_vWriteString((U8*)"LED 0 is ON         ");
 8001a6a:	488d      	ldr	r0, [pc, #564]	; (8001ca0 <DefineUserCommand+0x338>)
 8001a6c:	f7fe fea0 	bl	80007b0 <HLCD_vWriteString>
						MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_7 ,HIGH_STATE);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2107      	movs	r1, #7
 8001a74:	2001      	movs	r0, #1
 8001a76:	f7ff fa5d 	bl	8000f34 <MGPIO_vWritePinData>
					}
					else{	}
					HLCD_vGoTo(2,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7fe fe05 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001a82:	4888      	ldr	r0, [pc, #544]	; (8001ca4 <DefineUserCommand+0x33c>)
 8001a84:	f7fe fe94 	bl	80007b0 <HLCD_vWriteString>
				break;
 8001a88:	e08f      	b.n	8001baa <DefineUserCommand+0x242>
				case '8': //LED2
					TOG_BIT(EXE_LED_1_ON_OFF , 0);
 8001a8a:	4b87      	ldr	r3, [pc, #540]	; (8001ca8 <DefineUserCommand+0x340>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b84      	ldr	r3, [pc, #528]	; (8001ca8 <DefineUserCommand+0x340>)
 8001a96:	701a      	strb	r2, [r3, #0]
					HLCD_vGoTo(0,0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7fe fdf6 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001aa0:	487b      	ldr	r0, [pc, #492]	; (8001c90 <DefineUserCommand+0x328>)
 8001aa2:	f7fe fe85 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7fe fdef 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001aae:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <DefineUserCommand+0x32c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fe06 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001ab8:	2020      	movs	r0, #32
 8001aba:	f7fe fe03 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vGoTo(1,0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7fe fde3 	bl	800068c <HLCD_vGoTo>
					if(EXE_LED_1_ON_OFF== 0)
 8001ac6:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <DefineUserCommand+0x340>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d108      	bne.n	8001ae0 <DefineUserCommand+0x178>
					{
						HLCD_vWriteString((U8*)"LED 1 is OFF        ");
 8001ace:	4877      	ldr	r0, [pc, #476]	; (8001cac <DefineUserCommand+0x344>)
 8001ad0:	f7fe fe6e 	bl	80007b0 <HLCD_vWriteString>
						MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_1 ,LOW_STATE);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff fa2b 	bl	8000f34 <MGPIO_vWritePinData>
 8001ade:	e00b      	b.n	8001af8 <DefineUserCommand+0x190>
					}
					else if(EXE_LED_1_ON_OFF == 1){
 8001ae0:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <DefineUserCommand+0x340>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <DefineUserCommand+0x190>
						HLCD_vWriteString((U8*)"LED 1 is ON         ");
 8001ae8:	4871      	ldr	r0, [pc, #452]	; (8001cb0 <DefineUserCommand+0x348>)
 8001aea:	f7fe fe61 	bl	80007b0 <HLCD_vWriteString>
						MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_1 ,HIGH_STATE);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2101      	movs	r1, #1
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fa1e 	bl	8000f34 <MGPIO_vWritePinData>
					}
					else{	}
					HLCD_vGoTo(2,0);
 8001af8:	2100      	movs	r1, #0
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7fe fdc6 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001b00:	4868      	ldr	r0, [pc, #416]	; (8001ca4 <DefineUserCommand+0x33c>)
 8001b02:	f7fe fe55 	bl	80007b0 <HLCD_vWriteString>
				break;
 8001b06:	e050      	b.n	8001baa <DefineUserCommand+0x242>
				case '9': //LED3
					HLCD_vGoTo(0,0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7fe fdbe 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001b10:	485f      	ldr	r0, [pc, #380]	; (8001c90 <DefineUserCommand+0x328>)
 8001b12:	f7fe fe4d 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001b16:	210f      	movs	r1, #15
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7fe fdb7 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <DefineUserCommand+0x32c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fdce 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f7fe fdcb 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vGoTo(1,0);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2001      	movs	r0, #1
 8001b32:	f7fe fdab 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"LED3          ");
 8001b36:	485f      	ldr	r0, [pc, #380]	; (8001cb4 <DefineUserCommand+0x34c>)
 8001b38:	f7fe fe3a 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(2,0);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7fe fda4 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001b44:	4857      	ldr	r0, [pc, #348]	; (8001ca4 <DefineUserCommand+0x33c>)
 8001b46:	f7fe fe33 	bl	80007b0 <HLCD_vWriteString>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_2 ,HIGH_STATE);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff f9f0 	bl	8000f34 <MGPIO_vWritePinData>
				break;
 8001b54:	e029      	b.n	8001baa <DefineUserCommand+0x242>
				case '/': //LED4
					HLCD_vGoTo(0,0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7fe fd97 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001b5e:	484c      	ldr	r0, [pc, #304]	; (8001c90 <DefineUserCommand+0x328>)
 8001b60:	f7fe fe26 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001b64:	210f      	movs	r1, #15
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7fe fd90 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <DefineUserCommand+0x32c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fda7 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001b76:	2020      	movs	r0, #32
 8001b78:	f7fe fda4 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vGoTo(1,0);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f7fe fd84 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"LED4          ");
 8001b84:	484c      	ldr	r0, [pc, #304]	; (8001cb8 <DefineUserCommand+0x350>)
 8001b86:	f7fe fe13 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(2,0);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7fe fd7d 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001b92:	4844      	ldr	r0, [pc, #272]	; (8001ca4 <DefineUserCommand+0x33c>)
 8001b94:	f7fe fe0c 	bl	80007b0 <HLCD_vWriteString>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_3 ,HIGH_STATE);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff f9c9 	bl	8000f34 <MGPIO_vWritePinData>
				break;
 8001ba2:	e002      	b.n	8001baa <DefineUserCommand+0x242>
				default:/*MESRA*/
					break;
				}
			}
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <DefineUserCommand+0x242>
					break;
 8001ba8:	bf00      	nop

			if('4'==G_key || '5'==G_key || '6'==G_key)
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <DefineUserCommand+0x32c>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b34      	cmp	r3, #52	; 0x34
 8001bb0:	d008      	beq.n	8001bc4 <DefineUserCommand+0x25c>
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <DefineUserCommand+0x32c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b35      	cmp	r3, #53	; 0x35
 8001bb8:	d004      	beq.n	8001bc4 <DefineUserCommand+0x25c>
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <DefineUserCommand+0x32c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b36      	cmp	r3, #54	; 0x36
 8001bc0:	f040 80ac 	bne.w	8001d1c <DefineUserCommand+0x3b4>
			{

				switch(G_key)	//Motor control
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <DefineUserCommand+0x32c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b36      	cmp	r3, #54	; 0x36
 8001bca:	d07b      	beq.n	8001cc4 <DefineUserCommand+0x35c>
 8001bcc:	2b36      	cmp	r3, #54	; 0x36
 8001bce:	f300 80a7 	bgt.w	8001d20 <DefineUserCommand+0x3b8>
 8001bd2:	2b34      	cmp	r3, #52	; 0x34
 8001bd4:	d002      	beq.n	8001bdc <DefineUserCommand+0x274>
 8001bd6:	2b35      	cmp	r3, #53	; 0x35
 8001bd8:	d02c      	beq.n	8001c34 <DefineUserCommand+0x2cc>
					HLCD_vWriteString((U8*)"                          ");
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_5 ,HIGH_STATE);
				    MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_6 ,LOW_STATE);
					break;
				default:
					break;
 8001bda:	e0a1      	b.n	8001d20 <DefineUserCommand+0x3b8>
					HLCD_vGoTo(0,0);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7fe fd54 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001be4:	482a      	ldr	r0, [pc, #168]	; (8001c90 <DefineUserCommand+0x328>)
 8001be6:	f7fe fde3 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001bea:	210f      	movs	r1, #15
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7fe fd4d 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <DefineUserCommand+0x32c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd64 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001bfc:	2020      	movs	r0, #32
 8001bfe:	f7fe fd61 	bl	80006c4 <HLCD_vWriteCharacter>
				    HLCD_vGoTo(1,0);
 8001c02:	2100      	movs	r1, #0
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7fe fd41 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Motor left <-         ");
 8001c0a:	482c      	ldr	r0, [pc, #176]	; (8001cbc <DefineUserCommand+0x354>)
 8001c0c:	f7fe fdd0 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(2,0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2002      	movs	r0, #2
 8001c14:	f7fe fd3a 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001c18:	4822      	ldr	r0, [pc, #136]	; (8001ca4 <DefineUserCommand+0x33c>)
 8001c1a:	f7fe fdc9 	bl	80007b0 <HLCD_vWriteString>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_5 ,LOW_STATE);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2105      	movs	r1, #5
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff f986 	bl	8000f34 <MGPIO_vWritePinData>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_6 ,HIGH_STATE);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2106      	movs	r1, #6
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff f981 	bl	8000f34 <MGPIO_vWritePinData>
					break;
 8001c32:	e076      	b.n	8001d22 <DefineUserCommand+0x3ba>
					HLCD_vGoTo(0,0);
 8001c34:	2100      	movs	r1, #0
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7fe fd28 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001c3c:	4814      	ldr	r0, [pc, #80]	; (8001c90 <DefineUserCommand+0x328>)
 8001c3e:	f7fe fdb7 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001c42:	210f      	movs	r1, #15
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7fe fd21 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <DefineUserCommand+0x32c>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fd38 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001c54:	2020      	movs	r0, #32
 8001c56:	f7fe fd35 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vGoTo(1,0);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7fe fd15 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Motor stop            ");
 8001c62:	4817      	ldr	r0, [pc, #92]	; (8001cc0 <DefineUserCommand+0x358>)
 8001c64:	f7fe fda4 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(2,0);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7fe fd0e 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <DefineUserCommand+0x33c>)
 8001c72:	f7fe fd9d 	bl	80007b0 <HLCD_vWriteString>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_5 ,LOW_STATE);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff f95a 	bl	8000f34 <MGPIO_vWritePinData>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_6 ,LOW_STATE);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2106      	movs	r1, #6
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff f955 	bl	8000f34 <MGPIO_vWritePinData>
					break;
 8001c8a:	e04a      	b.n	8001d22 <DefineUserCommand+0x3ba>
 8001c8c:	08001f1c 	.word	0x08001f1c
 8001c90:	08001f2c 	.word	0x08001f2c
 8001c94:	20000048 	.word	0x20000048
 8001c98:	20000051 	.word	0x20000051
 8001c9c:	08001f3c 	.word	0x08001f3c
 8001ca0:	08001f54 	.word	0x08001f54
 8001ca4:	08001f6c 	.word	0x08001f6c
 8001ca8:	20000052 	.word	0x20000052
 8001cac:	08001f88 	.word	0x08001f88
 8001cb0:	08001fa0 	.word	0x08001fa0
 8001cb4:	08001fb8 	.word	0x08001fb8
 8001cb8:	08001fc8 	.word	0x08001fc8
 8001cbc:	08001fd8 	.word	0x08001fd8
 8001cc0:	08001ff0 	.word	0x08001ff0
					HLCD_vGoTo(0,0);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7fe fce0 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001ccc:	4849      	ldr	r0, [pc, #292]	; (8001df4 <DefineUserCommand+0x48c>)
 8001cce:	f7fe fd6f 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(0,15);
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7fe fcd9 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteCharacter(G_key);
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <DefineUserCommand+0x490>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fcf0 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vWriteCharacter(' ');
 8001ce4:	2020      	movs	r0, #32
 8001ce6:	f7fe fced 	bl	80006c4 <HLCD_vWriteCharacter>
					HLCD_vGoTo(1,0);
 8001cea:	2100      	movs	r1, #0
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7fe fccd 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"Motor right ->         ");
 8001cf2:	4842      	ldr	r0, [pc, #264]	; (8001dfc <DefineUserCommand+0x494>)
 8001cf4:	f7fe fd5c 	bl	80007b0 <HLCD_vWriteString>
					HLCD_vGoTo(2,0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f7fe fcc6 	bl	800068c <HLCD_vGoTo>
					HLCD_vWriteString((U8*)"                          ");
 8001d00:	483f      	ldr	r0, [pc, #252]	; (8001e00 <DefineUserCommand+0x498>)
 8001d02:	f7fe fd55 	bl	80007b0 <HLCD_vWriteString>
					MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_5 ,HIGH_STATE);
 8001d06:	2201      	movs	r2, #1
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff f912 	bl	8000f34 <MGPIO_vWritePinData>
				    MGPIO_vWritePinData(GPIOB_PORT, GPIO_PIN_6 ,LOW_STATE);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2106      	movs	r1, #6
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff f90d 	bl	8000f34 <MGPIO_vWritePinData>
					break;
 8001d1a:	e002      	b.n	8001d22 <DefineUserCommand+0x3ba>
				}
			}
 8001d1c:	bf00      	nop
 8001d1e:	e000      	b.n	8001d22 <DefineUserCommand+0x3ba>
					break;
 8001d20:	bf00      	nop
			static U8 EXE_AC_ON_OFF = 0b0;
			static U32 ADC_read=0;

			if('1'==G_key || '2'==G_key )
 8001d22:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <DefineUserCommand+0x490>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b31      	cmp	r3, #49	; 0x31
 8001d28:	d003      	beq.n	8001d32 <DefineUserCommand+0x3ca>
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <DefineUserCommand+0x490>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b32      	cmp	r3, #50	; 0x32
 8001d30:	d15d      	bne.n	8001dee <DefineUserCommand+0x486>

				{

				switch(G_key) //AC control
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <DefineUserCommand+0x490>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b31      	cmp	r3, #49	; 0x31
 8001d38:	d002      	beq.n	8001d40 <DefineUserCommand+0x3d8>
 8001d3a:	2b32      	cmp	r3, #50	; 0x32
 8001d3c:	d035      	beq.n	8001daa <DefineUserCommand+0x442>
						/*DEBUGING ADC*/
				//		ADC_read = MADC_u32ReadRegularData();
				//		HLCD_vWriteNumber(ADC_read );
					break;
					default:
					break;
 8001d3e:	e057      	b.n	8001df0 <DefineUserCommand+0x488>
						TOG_BIT(EXE_AC_ON_OFF , 0);
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <DefineUserCommand+0x49c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <DefineUserCommand+0x49c>)
 8001d4c:	701a      	strb	r2, [r3, #0]
						HLCD_vGoTo(0,0);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7fe fc9b 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001d56:	4827      	ldr	r0, [pc, #156]	; (8001df4 <DefineUserCommand+0x48c>)
 8001d58:	f7fe fd2a 	bl	80007b0 <HLCD_vWriteString>
						HLCD_vGoTo(0,15);
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7fe fc94 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteCharacter(G_key);
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <DefineUserCommand+0x490>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fcab 	bl	80006c4 <HLCD_vWriteCharacter>
						HLCD_vWriteCharacter(' ');
 8001d6e:	2020      	movs	r0, #32
 8001d70:	f7fe fca8 	bl	80006c4 <HLCD_vWriteCharacter>
						HLCD_vGoTo(1,0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7fe fc88 	bl	800068c <HLCD_vGoTo>
						if(EXE_AC_ON_OFF== 0){
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <DefineUserCommand+0x49c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <DefineUserCommand+0x424>
							HLCD_vWriteString((U8*)"AC is OFF        ");
 8001d84:	4820      	ldr	r0, [pc, #128]	; (8001e08 <DefineUserCommand+0x4a0>)
 8001d86:	f7fe fd13 	bl	80007b0 <HLCD_vWriteString>
 8001d8a:	e006      	b.n	8001d9a <DefineUserCommand+0x432>
						else if(EXE_AC_ON_OFF == 1){
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <DefineUserCommand+0x49c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d102      	bne.n	8001d9a <DefineUserCommand+0x432>
							HLCD_vWriteString((U8*)"AC is ON        ");
 8001d94:	481d      	ldr	r0, [pc, #116]	; (8001e0c <DefineUserCommand+0x4a4>)
 8001d96:	f7fe fd0b 	bl	80007b0 <HLCD_vWriteString>
						HLCD_vGoTo(2,0);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f7fe fc75 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteString((U8*)"                          ");
 8001da2:	4817      	ldr	r0, [pc, #92]	; (8001e00 <DefineUserCommand+0x498>)
 8001da4:	f7fe fd04 	bl	80007b0 <HLCD_vWriteString>
					break;
 8001da8:	e022      	b.n	8001df0 <DefineUserCommand+0x488>
						HLCD_vGoTo(0,0);
 8001daa:	2100      	movs	r1, #0
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7fe fc6d 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteString((U8*)"Pressed Key-> ");
 8001db2:	4810      	ldr	r0, [pc, #64]	; (8001df4 <DefineUserCommand+0x48c>)
 8001db4:	f7fe fcfc 	bl	80007b0 <HLCD_vWriteString>
						HLCD_vGoTo(0,15);
 8001db8:	210f      	movs	r1, #15
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7fe fc66 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteCharacter(G_key);
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <DefineUserCommand+0x490>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fc7d 	bl	80006c4 <HLCD_vWriteCharacter>
						HLCD_vWriteCharacter(' ');
 8001dca:	2020      	movs	r0, #32
 8001dcc:	f7fe fc7a 	bl	80006c4 <HLCD_vWriteCharacter>
						HLCD_vGoTo(1,0);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7fe fc5a 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteString((U8*)"Temp. Check        ");
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <DefineUserCommand+0x4a8>)
 8001dda:	f7fe fce9 	bl	80007b0 <HLCD_vWriteString>
						HLCD_vGoTo(2,0);
 8001dde:	2100      	movs	r1, #0
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7fe fc53 	bl	800068c <HLCD_vGoTo>
						HLCD_vWriteString((U8*)"Temp = ");
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <DefineUserCommand+0x4ac>)
 8001de8:	f7fe fce2 	bl	80007b0 <HLCD_vWriteString>
					break;
 8001dec:	e000      	b.n	8001df0 <DefineUserCommand+0x488>
					}
			}
 8001dee:	bf00      	nop
		G_key = 'P';
 8001df0:	e5ce      	b.n	8001990 <DefineUserCommand+0x28>
 8001df2:	bf00      	nop
 8001df4:	08001f2c 	.word	0x08001f2c
 8001df8:	20000048 	.word	0x20000048
 8001dfc:	08002008 	.word	0x08002008
 8001e00:	08001f6c 	.word	0x08001f6c
 8001e04:	20000053 	.word	0x20000053
 8001e08:	08002020 	.word	0x08002020
 8001e0c:	08002034 	.word	0x08002034
 8001e10:	08002048 	.word	0x08002048
 8001e14:	0800205c 	.word	0x0800205c

08001e18 <Reset_Handler>:
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopForever+0x2>)
 8001e1a:	4685      	mov	sp, r0
 8001e1c:	f3af 8000 	nop.w
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <LoopForever+0x6>)
 8001e22:	490d      	ldr	r1, [pc, #52]	; (8001e58 <LoopForever+0xa>)
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <LoopForever+0xe>)
 8001e26:	2300      	movs	r3, #0
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:
 8001e2a:	58d4      	ldr	r4, [r2, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:
 8001e30:	18c4      	adds	r4, r0, r3
 8001e32:	428c      	cmp	r4, r1
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <LoopForever+0x12>)
 8001e38:	4c0a      	ldr	r4, [pc, #40]	; (8001e64 <LoopForever+0x16>)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:
 8001e42:	42a2      	cmp	r2, r4
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>
 8001e46:	f000 f811 	bl	8001e6c <__libc_init_array>
 8001e4a:	f7ff fc0d 	bl	8001668 <main>

08001e4e <LoopForever>:
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
 8001e50:	20018000 	.word	0x20018000
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	08027aec 	.word	0x08027aec
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000054 	.word	0x20000054

08001e68 <ADC_IRQHandler>:
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <__libc_init_array>:
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	4d0d      	ldr	r5, [pc, #52]	; (8001ea4 <__libc_init_array+0x38>)
 8001e70:	4c0d      	ldr	r4, [pc, #52]	; (8001ea8 <__libc_init_array+0x3c>)
 8001e72:	1b64      	subs	r4, r4, r5
 8001e74:	10a4      	asrs	r4, r4, #2
 8001e76:	2600      	movs	r6, #0
 8001e78:	42a6      	cmp	r6, r4
 8001e7a:	d109      	bne.n	8001e90 <__libc_init_array+0x24>
 8001e7c:	4d0b      	ldr	r5, [pc, #44]	; (8001eac <__libc_init_array+0x40>)
 8001e7e:	4c0c      	ldr	r4, [pc, #48]	; (8001eb0 <__libc_init_array+0x44>)
 8001e80:	f000 f818 	bl	8001eb4 <_init>
 8001e84:	1b64      	subs	r4, r4, r5
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	2600      	movs	r6, #0
 8001e8a:	42a6      	cmp	r6, r4
 8001e8c:	d105      	bne.n	8001e9a <__libc_init_array+0x2e>
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e94:	4798      	blx	r3
 8001e96:	3601      	adds	r6, #1
 8001e98:	e7ee      	b.n	8001e78 <__libc_init_array+0xc>
 8001e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9e:	4798      	blx	r3
 8001ea0:	3601      	adds	r6, #1
 8001ea2:	e7f2      	b.n	8001e8a <__libc_init_array+0x1e>
 8001ea4:	08027ae4 	.word	0x08027ae4
 8001ea8:	08027ae4 	.word	0x08027ae4
 8001eac:	08027ae4 	.word	0x08027ae4
 8001eb0:	08027ae8 	.word	0x08027ae8

08001eb4 <_init>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	bf00      	nop
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr

08001ec0 <_fini>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	bf00      	nop
 8001ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec6:	bc08      	pop	{r3}
 8001ec8:	469e      	mov	lr, r3
 8001eca:	4770      	bx	lr
